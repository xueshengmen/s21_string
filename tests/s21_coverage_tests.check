#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "s21_string.h"
#define BUFFERSIZE 256
#define PRINT_TEST_FORMAT fprintf(stderr, "\n\n%s\n\n", format);

//=======================s21_strtok_and_s21_strlen_1================================
#test s21_strtok_and_s21_strlen_1
char s21_str[] = "Aboba++Floppa_! Kotya====!Shleppa";
char orig_str[] = "Aboba++Floppa_! Kotya====!Shleppa";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res && orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_1================================

//=======================s21_strtok_and_s21_strlen_2================================
#test s21_strtok_and_s21_strlen_2
char s21_str[] = "++Aboba++Floppa_! Kotya===!Shleppa+++ A +";
char orig_str[] = "++Aboba++Floppa_! Kotya===!Shleppa+++ A +";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res && orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_2================================

//=======================s21_strtok_and_s21_strlen_3================================
#test s21_strtok_and_s21_strlen_3
char s21_str[] = "++Aboba++Floppa_! Kotya===!Shleppa+++ A +";
char orig_str[] = "++Aboba++Floppa_! Kotya===!Shleppa+++ A +";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res && orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_3================================

//=======================s21_strtok_and_s21_strlen_4================================
#test s21_strtok_and_s21_strlen_4
char s21_str[] = "AbobaHasNoDelims";
char orig_str[] = "AbobaHasNoDelims";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res && orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_4================================

//=======================s21_strtok_and_s21_strlen_5================================
#test s21_strtok_and_s21_strlen_5
char s21_str[] = "++++++++";
char orig_str[] = "++++++++";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

ck_assert_ptr_null(s21_res);
ck_assert_ptr_null(orig_res);
//=======================s21_strtok_and_s21_strlen_5================================

//=======================s21_strtok_and_s21_strlen_6================================
#test s21_strtok_and_s21_strlen_6
char s21_str[] = "Aboba_Floppa_Roba";
char orig_str[] = "Aboba_Floppa_Roba";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

int i = 5;
while (i) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);
  i--;

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_6================================

//=======================s21_strtok_and_s21_strlen_7================================
#test s21_strtok_and_s21_strlen_7
char s21_str[] = "Aboba__+Floppa_  Roba";
char orig_str[] = "Aboba__+Floppa_  Roba";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res && orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_7================================

//=======================s21_strtok_and_s21_strlen_8================================
#test s21_strtok_and_s21_strlen_8
char s21_str[] = "Aboba__Floppa_+++Roba_Kepa";
char orig_str[] = "Aboba__Floppa_+++Roba_Kepa";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res && orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_8================================

//=======================s21_strtok_and_s21_strlen_9================================
#test s21_strtok_and_s21_strlen_9
char s21_str[] = "     Aboba__+ Flo!ppa_   Roba+";
char orig_str[] = "     Aboba__+ Flo!ppa_   Roba+";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res || orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_9================================

//=======================s21_strtok_and_s21_strlen_10================================
#test s21_strtok_and_s21_strlen_10
char s21_str[] = "!Stepa__ !M!ish a____Anton+An!!!drey";
char orig_str[] = "!Stepa__ !M!ish a____Anton+An!!!drey";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res || orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_10================================

//=======================s21_strtok_and_s21_strlen_11================================
#test s21_strtok_and_s21_strlen_11
char s21_str[] = "!       A!B!C!D!E!!F!!G";
char orig_str[] = "!       A!B!C!D!E!!F!!G";
const char delims[] = "+_! =";

char *s21_res = s21_strtok(s21_str, delims);
char *orig_res = strtok(orig_str, delims);

ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
ck_assert_str_eq(s21_res, orig_res);

while (s21_res || orig_res) {
  s21_res = s21_strtok(NULL, delims);
  orig_res = strtok(NULL, delims);

  if (s21_res || orig_res) {
    ck_assert_str_eq(s21_res, orig_res);
    ck_assert_int_eq(s21_strlen(s21_res), s21_strlen(orig_res));
  } else {
    ck_assert_ptr_null(s21_res);
    ck_assert_ptr_null(orig_res);
  }
}
//=======================s21_strtok_and_s21_strlen_11================================

//=======================s21_memchr_1================================
#test s21_memchr_1
size_t n_byte = 0;
char str[10] = "";
int find_byte = '\0';

ck_assert_ptr_eq(s21_memchr(str, find_byte, n_byte),
                 memchr(str, find_byte, n_byte));
//=======================s21_memchr_1================================

//=======================s21_memchr_2================================
#test s21_memchr_2
size_t n_byte = 7;
char str[10] = "string";
int find_byte = '\0';

ck_assert_ptr_eq(s21_memchr(str, find_byte, n_byte),
                 memchr(str, find_byte, n_byte));
//=======================s21_memchr_2================================

//=======================s21_memchr_3================================
#test s21_memchr_3
size_t n_byte = 6;
char str[10] = "Atring";
int find_byte = 'A';

ck_assert_ptr_eq(s21_memchr(str, find_byte, n_byte),
                 memchr(str, find_byte, n_byte));
//=======================s21_memchr_3================================

//=======================s21_memchr_4================================
#test s21_memchr_4
size_t n_byte = 7;
char str[10] = "StringA";
int find_byte = 'A';

ck_assert_ptr_eq(s21_memchr(str, find_byte, n_byte),
                 memchr(str, find_byte, n_byte));
//=======================s21_memchr_4================================

//=======================s21_memchr_5================================
#test s21_memchr_5
size_t n_byte = 15;
char str[16] = "Str55333222ingA";
int find_byte = '3';

ck_assert_ptr_eq(s21_memchr(str, find_byte, n_byte),
                 memchr(str, find_byte, n_byte));
//=======================s21_memchr_5================================

//=======================s21_memchr_6================================
#test s21_memchr_6
int array[] = {1, 2, 3, 666, 5, 99, 100};
size_t n_byte = sizeof(int) * 7;
int find_byte = 666;

ck_assert_ptr_eq(s21_memchr(array, find_byte, n_byte),
                 memchr(array, find_byte, n_byte));
//=======================s21_memchr_6================================

//=======================s21_memchr_7================================
#test s21_memchr_7
float array[] = {1, 2, 3, 666, 5, 99, 100};
size_t n_byte = sizeof(float) * 7;
double find_byte = 666;

ck_assert_ptr_eq(s21_memchr(array, find_byte, n_byte),
                 memchr(array, find_byte, n_byte));
//=======================s21_memchr_7================================

//=======================s21_memchr_8================================
#test s21_memchr_8
size_t n_byte = 5;
char str[10] = "aboba";
int find_byte = 'c';

ck_assert_ptr_eq(s21_memchr(str, find_byte, n_byte),
                 memchr(str, find_byte, n_byte));
//=======================s21_memchr_8================================

//=======================s21_memcmp_1================================
#test s21_memcmp_1
char str1[] = "aboba";
char str2[] = "aboba";
int n = 0;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_1================================

//=======================s21_memcmp_2================================
#test s21_memcmp_2
char str1[] = "aboba";
char str2[] = "aboba";
int n = 3;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_2================================

//=======================s21_memcmp_3================================
#test s21_memcmp_3
char str1[] = "aboba";
char str2[] = "Aboba";
int n = 1;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_3================================

//=======================s21_memcmp_4================================
#test s21_memcmp_4
char str1[] = "1";
char str2[] = "1";
int n = 0;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_4================================

//=======================s21_memcmp_5================================
#test s21_memcmp_5
char str1[] = "1";
char str2[] = "1234";
int n = 1;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_5================================

//=======================s21_memcmp_6================================
#test s21_memcmp_6
char str1[] = "1234";
char str2[] = "1234";
int n = 2;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_6================================

//=======================s21_memcmp_7================================
#test s21_memcmp_7
char str1[] = "13";
char str2[] = "1234";
int n = 2;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_7================================

//=======================s21_memcmp_8================================
#test s21_memcmp_8
char str1[] =
    "111111111111111111112312312312312312434524563567adsfe 4rafa ewfseASDASD";
char str2[] =
    "111111111111111111112312312312312312434524563567adsfe 4rafa ewfseASDASD";
int n = 71;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_8================================

//=======================s21_memcmp_9================================
#test s21_memcmp_9
char str1[] =
    "111111111111111111112312312312312312434524563567adsfe 4rafa ewfseASDASD";
char str2[] =
    "111111111111111111112312312312312312434524563567adsfe 4rafa ewfseASDASd";
int n = 71;

ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));
//=======================s21_memcmp_9================================

//=======================s21_memcpy_1================================
#test s21_memcpy_1
char src[] = "i hate memcmp";
size_t kByte = 12;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_1================================

//=======================s21_memcpy_2================================
#test s21_memcpy_2
char src[] = "aboba";
size_t kByte = 0;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_2================================

//=======================s21_memcpy_3================================
#test s21_memcpy_3
char src[] = "";
size_t kByte = 0;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_3================================

//=======================s21_memcpy_4================================
#test s21_memcpy_4
char src[] = "123";
size_t kByte = 1;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_4================================

//=======================s21_memcpy_5================================
#test s21_memcpy_5
char src[] = "Zboba";
size_t kByte = 1;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_5================================

//=======================s21_memcpy_6================================
#test s21_memcpy_6
char src[] = "09";
size_t kByte = 1;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_6================================

//=======================s21_memcpy_7================================
#test s21_memcpy_7
char src[] = "abobasdafoijasdofjas asdopij";
size_t kByte = 28;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_7================================

//=======================s21_memcpy_8================================
#test s21_memcpy_8
char src[] = "aposkd AOSIjFasodijpaoisdjf poisdjfg";
size_t kByte = 36;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_8================================

//=======================s21_memcpy_9================================
#test s21_memcpy_9
char src[] = "aodasf ieuwfh luhasdfLIAUSHD liuh 12li3uh 12i4ouhsdfh";
size_t kByte = 53;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_9================================

//=======================s21_memcpy_10================================
#test s21_memcpy_10
char src[] =
    "()()(((())):!,....aodasf ieuwfh luhasdfLIAUSHD liuh 12li3uh 12i4ouhsdfh";
size_t kByte = 71;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_10================================

//=======================s21_memcpy_11================================
#test s21_memcpy_11
char src[] = "I hate memcmp";
size_t kByte = 0;
char res[kByte + 8];
char expected[kByte + 8];

s21_memcpy(res, src, kByte);
memcpy(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memcpy_11================================

//=======================s21_memmove_1================================
#test s21_memmove_1
char src[200] = "";
char src2[200] = "";
size_t copy_kByte = 0;

char *res = src;
char *expected = src2;
size_t check_kByte = 0;

s21_memmove(res, src, copy_kByte);
memmove(expected, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_1================================

//=======================s21_memmove_2================================
#test s21_memmove_2
char src[200] = "123SDFAZ`ESFsdfsdf";
char src2[200] = "123SDFAZ`ESFsdfsdf";
size_t copy_kByte = 10;

char res[200] = "";
char expected[200] = "";
size_t check_kByte = 10;

s21_memmove(res, src, copy_kByte);
memmove(expected, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_2================================

//=======================s21_memmove_3================================
#test s21_memmove_3
char src[200] = "";
char src2[200] = "";
size_t copy_kByte = 0;

char res[200] = "i hate memcmp";
char expected[200] = "i hate memcmp";
size_t check_kByte = 13;

s21_memmove(res, src, copy_kByte);
memmove(expected, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_3================================

//=======================s21_memmove_4================================
#test s21_memmove_4
char src[200] = "Hate";
char src2[200] = "Hate";
size_t copy_kByte = 4;

char res[200] = "i hate memcmp";
char expected[200] = "i hate memcmp";
size_t check_kByte = 17;

s21_memmove(res, src, copy_kByte);
memmove(expected, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_4================================

//=======================s21_memmove_5================================
#test s21_memmove_5
char src[200] = "Hate";
char src2[200] = "Hate";
size_t copy_kByte = 4;

char res[200] = "i hate memcmp";
char expected[200] = "i hate memcmp";
size_t check_kByte = 17;

s21_memmove(res + 13, src, copy_kByte);
memmove(expected + 13, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_5================================

//=======================s21_memmove_6================================
#test s21_memmove_6
char src[200] = "Hate";
char src2[200] = "Hate";
size_t copy_kByte = 4;

char res[200] = "i hate memcmp";
char expected[200] = "i hate memcmp";
size_t check_kByte = 17;

s21_memmove(res + 5, src, copy_kByte);
memmove(expected + 5, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_6================================

//=======================s21_memmove_7================================
#test s21_memmove_7
char src[200] = "I HATE memmove!!!";
char src2[200] = "I HATE memmove!!!";
size_t copy_kByte = 17;

char *res = src;
char *expected = src2;
size_t check_kByte = 34;

s21_memmove(res, src, copy_kByte);
memmove(expected, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_7================================

//=======================s21_memmove_8================================
#test s21_memmove_8
char src[200] = "I HATE memmove!!!";
char src2[200] = "I HATE memmove!!!";
size_t copy_kByte = 17;

char *res = src + 17;
char *expected = src2 + 17;
size_t check_kByte = 34;

s21_memmove(res, src, copy_kByte);
memmove(expected, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_8================================

//=======================s21_memmove_9================================
#test s21_memmove_9
char src[200] = "I HATE memmove!!!";
char src2[200] = "I HATE memmove!!!";
size_t copy_kByte = 17;

char *res = src + 5;
char *expected = src2 + 5;
size_t check_kByte = 34;

s21_memmove(res, src, copy_kByte);
memmove(expected, src2, copy_kByte);

ck_assert_mem_eq(res, expected, check_kByte);
//=======================s21_memmove_9================================

//=======================s21_memmove_10================================
#test s21_memmove_10
char src[] = "aboba";
size_t kByte = 0;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_10================================

//=======================s21_memmove_11================================
#test s21_memmove_11
char src[] = "";
size_t kByte = 0;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_11================================

//=======================s21_memmove_12================================
#test s21_memmove_12
char src[] = "I hate memcmp";
size_t kByte = 0;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_12================================

//=======================s21_memmove_13================================
#test s21_memmove_13
char src[] = "123";
size_t kByte = 1;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_13================================

//=======================s21_memmove_14================================
#test s21_memmove_14
char src[] = "aboba";
size_t kByte = 1;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_14================================

//=======================s21_memmove_15================================
#test s21_memmove_15
char src[] = "Zboba";
size_t kByte = 1;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_15================================

//=======================s21_memmove_16================================
#test s21_memmove_16
char src[] = "09";
size_t kByte = 1;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_16================================

//=======================s21_memmove_17================================
#test s21_memmove_17
char src[] = "abobasdafoijasdofjas asdopij";
size_t kByte = 28;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_17================================

//=======================s21_memmove_18================================
#test s21_memmove_18
char src[] = "aposkd AOSIjFasodijpaoisdjf poisdjfg";
size_t kByte = 36;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_18================================

//=======================s21_memmove_19================================
#test s21_memmove_19
char src[] = "aodasf ieuwfh luhasdfLIAUSHD liuh 12li3uh 12i4ouhsdfh";
size_t kByte = 53;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_19================================

//=======================s21_memmove_20================================
#test s21_memmove_20
char src[] =
    "()()(((())):!,....aodasf ieuwfh luhasdfLIAUSHD liuh 12li3uh 12i4ouhsdfh";
size_t kByte = 71;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_20================================

//=======================s21_memmove_21================================
#test s21_memmove_21
int src[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
size_t kByte = 4;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_21================================

//=======================s21_memmove_22================================
#test s21_memmove_22
float src[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
size_t kByte = 8;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_22================================

//=======================s21_memmove_23================================
#test s21_memmove_23
long double src[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
size_t kByte = 16;
char res[kByte + 8];
char expected[kByte + 8];

s21_memmove(res, src, kByte);
memmove(expected, src, kByte);

ck_assert_mem_eq(res, expected, kByte);
//=======================s21_memmove_23================================

//=======================s21_memset_1================================
#test s21_memset_1
char res[] = "aboba";
char expected[] = "aboba";
char replace = 'g';
size_t n_byte = 5;

s21_memset(res, replace, n_byte);
memset(expected, replace, n_byte);

ck_assert_str_eq(res, expected);
//=======================s21_memset_1================================

//=======================s21_memset_2================================
#test s21_memset_2
char res[] = "aboba";
char expected[] = "aboba";
char replace = 'g';
size_t n_byte = 0;

s21_memset(res, replace, n_byte);
memset(expected, replace, n_byte);

ck_assert_str_eq(res, expected);
//=======================s21_memset_2================================

//=======================s21_memset_3================================
#test s21_memset_3
char res[] = "";
char expected[] = "";
char replace = '\0';
size_t n_byte = 0;

s21_memset(res, replace, n_byte);
memset(expected, replace, n_byte);

ck_assert_str_eq(res, expected);
//=======================s21_memset_3================================

//=======================s21_memset_4================================
#test s21_memset_4
char res[] = "aboba";
char expected[] = "aboba";
char replace = 'A';
size_t n_byte = 3;

s21_memset(res, replace, n_byte);
memset(expected, replace, n_byte);

ck_assert_str_eq(res, expected);
//=======================s21_memset_4================================

//=======================s21_memset_5================================
#test s21_memset_5
char res[] = "a1obA";
char expected[] = "a1obA";
char replace = '1';
size_t n_byte = 5;

s21_memset(res, replace, n_byte);
memset(expected, replace, n_byte);

ck_assert_str_eq(res, expected);
//=======================s21_memset_5================================

//=======================s21_memset_6================================
#test s21_memset_6
char res[] =
    "a1oas[pifjaosidfj oapisjdfpoi asjdfoij ouh12oi3 uh12i3 "
    "hiajhIOUAHSDiouAHSdu1).bA";
char expected[] =
    "a1oas[pifjaosidfj oapisjdfpoi asjdfoij ouh12oi3 uh12i3 "
    "hiajhIOUAHSDiouAHSdu1).bA";
char replace = '1';
size_t n_byte = 5;

s21_memset(res, replace, n_byte);
memset(expected, replace, n_byte);

ck_assert_str_eq(res, expected);
//=======================s21_memset_6================================

//=======================s21_strcat_1================================
#test s21_strcat_1
char src[] = " aboba!!!";
char res[5 + 10] = "Hello";
char expected[5 + 10] = "Hello";

s21_strcat(res, src);
strcat(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcat_1================================

//=======================s21_strcat_2================================
#test s21_strcat_2
char src[] = " aboba!!!";
char res[0 + 10] = "";
char expected[0 + 10] = "";

s21_strcat(res, src);
strcat(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcat_2================================

//=======================s21_strcat_3================================
#test s21_strcat_3
char src[] = "";
char res[] = "Hello";
char expected[] = "Hello";

s21_strcat(res, src);
strcat(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcat_3================================

//=======================s21_strcat_4================================
#test s21_strcat_4
char src[] = "asdfj  asdf aisdfjaiushdfASD SAD asDSad ASDAsdwqqeAS";
char res[5 + 53] = "Hello";
char expected[5 + 53] = "Hello";

s21_strcat(res, src);
strcat(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcat_4================================

//=======================s21_strcat_5================================
#test s21_strcat_5
char src[] = "asd0fj  asd1f aisdfjw6234A1241SD SA5 asDSad 89SDAsdw7qqeAS";
char res[5 + 59] = "Hello";
char expected[5 + 59] = "Hello";

s21_strcat(res, src);
strcat(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcat_5================================

//=======================s21_strcat_6================================
#test s21_strcat_6
char src[] = "asd0fj  asd1f aisdfjw6234A1241SD SA5 asDSad 89SDAsdw7qqeAS)(?!.,";
char res[5 + 65] = "Hello";
char expected[5 + 65] = "Hello";

s21_strcat(res, src);
strcat(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcat_6================================

//=======================s21_strncat_1================================
#test s21_strncat_1
char src[] = "";
char res[] = "";
char expected[] = "";
size_t n_byte = 0;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_1================================

//=======================s21_strncat_2================================
#test s21_strncat_2
char src[] = "abosal";
char res[10] = "";
char expected[10] = "";
size_t n_byte = 0;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_2================================

//=======================s21_strncat_3================================
#test s21_strncat_3
char src[] = "";
char res[10] = "cd";
char expected[10] = "cd";
size_t n_byte = 0;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_3================================

//=======================s21_strncat_4================================
#test s21_strncat_4
char src[] = "";
char res[10] = "cd";
char expected[10] = "cd";
size_t n_byte = 0;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_4================================

//=======================s21_strncat_5================================
#test s21_strncat_5
char src[] = "abosal";
char res[25] = "koleka";
char expected[25] = "koleka";
size_t n_byte = 6;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_5================================

//=======================s21_strncat_6================================
#test s21_strncat_6
char src[] = "BIGFLOPPA";
char res[25] = "BIGFLOPPA";
char expected[25] = "BIGFLOPPA";
size_t n_byte = 5;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_6================================

//=======================s21_strncat_7================================
#test s21_strncat_7
char src[] = "BIGFLOPPA";
char res[25] = "BIGFLOPPA";
char expected[25] = "BIGFLOPPA";
size_t n_byte = 0;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_7================================

//=======================s21_strncat_8================================
#test s21_strncat_8
char src[] = "BIGFLOPPA";
char res[25] = "BIGFLOPPA";
char expected[25] = "BIGFLOPPA";
size_t n_byte = 1;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_8================================

//=======================s21_strncat_9================================
#test s21_strncat_9
char src[] = "BIGFLOPPA";
char res[25] = "BIGFLOPPA";
char expected[25] = "BIGFLOPPA";
size_t n_byte = 10;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_9================================

//=======================s21_strncat_10================================
#test s21_strncat_10
char src[] = "\0";
char res[25] = "BIGFLOPPA";
char expected[25] = "BIGFLOPPA";
size_t n_byte = 1;

s21_strncat(res, src, n_byte);
strncat(expected, src, n_byte);

ck_assert_mem_ge(res, expected, n_byte);
//=======================s21_strncat_10================================

//=======================s21_strchr_1================================
#test s21_strchr_1
char src[] = "abobasnutsa";
char find = 'a';

ck_assert_pstr_eq(s21_strchr(src, find), strchr(src, find));
//=======================s21_strchr_1================================

//=======================s21_strchr_2================================
#test s21_strchr_2
char src[] = "abobasnutAsa";
char find = 'A';

ck_assert_pstr_eq(s21_strchr(src, find), strchr(src, find));
//=======================s21_strchr_2================================

//=======================s21_strchr_3================================
#test s21_strchr_3
char src[] = "abobasnutA1sa";
char find = '1';

ck_assert_pstr_eq(s21_strchr(src, find), strchr(src, find));
//=======================s21_strchr_3================================

//=======================s21_strchr_4================================
#test s21_strchr_4
char src[] = "abobasnutAsa";
char find = 'Z';

ck_assert_pstr_eq(s21_strchr(src, find), strchr(src, find));
//=======================s21_strchr_4================================

//=======================s21_strchr_5================================
#test s21_strchr_5
char src[] = "abobasnutAsa";
char find = '3';

ck_assert_pstr_eq(s21_strchr(src, find), strchr(src, find));
//=======================s21_strchr_5================================

//=======================s21_strchr_6================================
#test s21_strchr_6
char src[] = "";
char find = '3';

ck_assert_pstr_eq(s21_strchr(src, find), strchr(src, find));
//=======================s21_strchr_6================================

//=======================s21_strcmp_1================================
#test s21_strcmp_1
char a[] = "Heloboba";
char b[] = "Heloboba";

int got = s21_strcmp(a, b);
int expected = strcmp(a, b);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strcmp_1================================

//=======================s21_strcmp_2================================
#test s21_strcmp_2
char a[] = "HEloboba";
char b[] = "Heloboba";

int got = s21_strcmp(a, b);
int expected = strcmp(a, b);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strcmp_2================================

//=======================s21_strcmp_3================================
#test s21_strcmp_3
char a[] = "Hel0boba";
char b[] = "Helob0ba";

int got = s21_strcmp(a, b);
int expected = strcmp(a, b);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strcmp_3================================

//=======================s21_strcmp_4================================
#test s21_strcmp_4
char a[] = "Heloboba";
char b[] = "";

int got = s21_strcmp(a, b);
int expected = strcmp(a, b);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strcmp_4================================

//=======================s21_strcmp_5================================
#test s21_strcmp_5
char a[] = "";
char b[] = "Heloboba";

int got = s21_strcmp(a, b);
int expected = strcmp(a, b);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strcmp_5================================

//=======================s21_strcmp_6================================
#test s21_strcmp_6
char a[] = "L(8)L";
char b[] = "L(8)L";

int got = s21_strcmp(a, b);
int expected = strcmp(a, b);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strcmp_6================================

//=======================s21_strcmp_7================================
#test s21_strcmp_7
char a[] = "";
char b[] = "";

int got = s21_strcmp(a, b);
int expected = strcmp(a, b);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strcmp_7================================

//=======================s21_strcmp_8================================
#test s21_strcmp_8
char a[] = "1234567890";
char b[] = "1234567890";

int got = s21_strcmp(a, b);
int expected = strcmp(a, b);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strcmp_8================================

//=======================s21_strncmp_1================================
#test s21_strncmp_1
char str1[] = "";
char str2[] = "";
size_t n_byte = 0;

int got = s21_strncmp(str1, str2, n_byte);
int expected = strncmp(str1, str2, n_byte);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strncmp_1================================

//=======================s21_strncmp_2================================
#test s21_strncmp_2
char str1[] = "floppa";
char str2[] = "";
size_t n_byte = 0;

int got = s21_strncmp(str1, str2, n_byte);
int expected = strncmp(str1, str2, n_byte);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strncmp_2================================

//=======================s21_strncmp_3================================
#test s21_strncmp_3
char str1[] = "";
char str2[] = "floppa";
size_t n_byte = 0;

int got = s21_strncmp(str1, str2, n_byte);
int expected = strncmp(str1, str2, n_byte);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strncmp_3================================

//=======================s21_strncmp_4================================
#test s21_strncmp_4
char str1[] = "floppa";
char str2[] = "floppa";
size_t n_byte = 6;

int got = s21_strncmp(str1, str2, n_byte);
int expected = strncmp(str1, str2, n_byte);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strncmp_4================================

//=======================s21_strncmp_5================================
#test s21_strncmp_5
char str1[] = "floppabazbazkotya";
char str2[] = "floppabaz";
size_t n_byte = 10;

int got = s21_strncmp(str1, str2, n_byte);
int expected = strncmp(str1, str2, n_byte);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strncmp_5================================

//=======================s21_strncmp_6================================
#test s21_strncmp_6
char str1[] = "floppa";
char str2[] = "floppa";
size_t n_byte = 1;

int got = s21_strncmp(str1, str2, n_byte);
int expected = strncmp(str1, str2, n_byte);

if (got > 1) got = 1;
if (expected > 1) expected = 1;

if (got < -1) got = -1;
if (expected < -1) expected = -1;

ck_assert_int_eq(got, expected);
//=======================s21_strncmp_6================================

//=======================s21_strcpy_1================================
#test s21_strcpy_1
char src[] = " floppa!!!";
char res[5 + 15] = "aboba ";
char expected[5 + 15] = "aboba ";

s21_strcpy(res, src);
strcpy(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcpy_1================================

//=======================s21_strcpy_2================================
#test s21_strcpy_2
char src[] = "Floppa!!!";
char res[5 + 15] = "";
char expected[5 + 15] = "";

s21_strcpy(res, src);
strcpy(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcpy_2================================

//=======================s21_strcpy_3================================
#test s21_strcpy_3
char src[] = "";
char res[5 + 15] = "abobas";
char expected[5 + 15] = "abobas";

s21_strcpy(res, src);
strcpy(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcpy_3================================

//=======================s21_strcpy_4================================
#test s21_strcpy_4
char src[] = "";
char res[5 + 15] = "";
char expected[5 + 15] = "";

s21_strcpy(res, src);
strcpy(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcpy_4================================

//=======================s21_strcpy_5================================
#test s21_strcpy_5
char src[] = "1";
char res[5 + 15] = "";
char expected[5 + 15] = "";

s21_strcpy(res, src);
strcpy(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcpy_5================================

//=======================s21_strcpy_6================================
#test s21_strcpy_6
char src[] = " my dear friend\"";
char res[5 + 15] = "Hello";
char expected[5 + 15] = "Hello";

s21_strcpy(res, src);
strcpy(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcpy_6================================

//=======================s21_strcpy_7================================
#test s21_strcpy_7
char src[] = "ab\0ba";
char res[10 + 9] = "Gre\0t";
char expected[10 + 9] = "Gre\0t";

s21_strcpy(res, src);
strcpy(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcpy_7================================

//=======================s21_strcpy_8================================
#test s21_strcpy_8
char src[] = "ad[sofijpoiajsdf pj98981h23 p9h floppa!!!";
char res[49 + 42] = "as[oidjf paijsdf j9oqh2837o4h hUW auhduash W8awd";
char expected[49 + 42] = "as[oidjf paijsdf j9oqh2837o4h hUW auhduash W8awd";

s21_strcpy(res, src);
strcpy(expected, src);

ck_assert_str_eq(res, expected);
//=======================s21_strcpy_8================================

//=======================s21_strncpy_1================================
#test s21_strncpy_1
char src[] = "";
char res[] = "";
char exp[] = "";
size_t n_byte = 0;

s21_strncpy(res, src, n_byte);
strncpy(exp, src, n_byte);

ck_assert_str_eq(res, exp);
//=======================s21_strncpy_1================================

//=======================s21_strncpy_2================================
#test s21_strncpy_2
char src[] = "123";
char res[] = "123";
char exp[] = "123";
size_t n_byte = 0;

s21_strncpy(res, src, n_byte);
strncpy(exp, src, n_byte);

ck_assert_str_eq(res, exp);
//=======================s21_strncpy_2================================

//=======================s21_strncpy_3================================
#test s21_strncpy_3
char src[] = "";
char res[] = "123";
char exp[] = "123";
size_t n_byte = 0;

s21_strncpy(res, src, n_byte);
strncpy(exp, src, n_byte);

ck_assert_str_eq(res, exp);
//=======================s21_strncpy_3================================

//=======================s21_strncpy_4================================
#test s21_strncpy_4
char src[] = "123";
char res[5] = "123";
char exp[5] = "123";
size_t n_byte = 1;

s21_strncpy(res, src, n_byte);
strncpy(exp, src, n_byte);

ck_assert_str_eq(res, exp);
//=======================s21_strncpy_4================================

//=======================s21_strncpy_5================================
#test s21_strncpy_5
char src[] = "123";
char res[7] = "123";
char exp[7] = "123";
size_t n_byte = 2;

s21_strncpy(res, src, n_byte);
strncpy(exp, src, n_byte);

ck_assert_str_eq(res, exp);
//=======================s21_strncpy_5================================

//=======================s21_strncpy_6================================
#test s21_strncpy_6
char src[] = "Str1ng";
char res[7 + 7] = "Str1ng";
char exp[7 + 7] = "Str1ng";
size_t n_byte = 7;

s21_strncpy(res, src, n_byte);
strncpy(exp, src, n_byte);

ck_assert_str_eq(res, exp);
//=======================s21_strncpy_6================================

//=======================s21_strcspn_1================================
#test s21_strcspn_1
char src[] = "";
char res[] = "";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_1================================

//=======================s21_strcspn_2================================
#test s21_strcspn_2
char src[] = "gora";
char res[] = "";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_2================================

//=======================s21_strcspn_3================================
#test s21_strcspn_3
char src[] = "";
char res[] = "gora";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_3================================

//=======================s21_strcspn_4================================
#test s21_strcspn_4
char src[] = "gora";
char res[] = "gOra";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_4================================

//=======================s21_strcspn_5================================
#test s21_strcspn_5
char src[] = "123";
char res[] = "123";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_5================================

//=======================s21_strcspn_6================================
#test s21_strcspn_6
char src[] = "12345";
char res[] = "123";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_6================================

//=======================s21_strcspn_7================================
#test s21_strcspn_7
char src[] = "123";
char res[] = "12345";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_7================================

//=======================s21_strcspn_8================================
#test s21_strcspn_8
char src[] = "1234567890";
char res[] = "0987654321";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_8================================

//=======================s21_strcspn_9================================
#test s21_strcspn_9
char src[] = "1A2A3A4A5A";
char res[] = "123";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_9================================

//=======================s21_strcspn_10================================
#test s21_strcspn_10
char src[] = "a1aaa23aaa41235";
char res[] = "123";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_10================================

//=======================s21_strcspn_11================================
#test s21_strcspn_11
char src[] = "absD";
char res[] = "aD";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_11================================

//=======================s21_strcspn_12================================
#test s21_strcspn_12
char src[] = "32ASDASDPare[0g9jf m07y271234567890";
char res[] = "0987654321";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_12================================

//=======================s21_strcspn_13================================
#test s21_strcspn_13
char src[] = "32ASDASDPare[0g9jf m07y271234567890";
char res[] = "1234567890QWERTYUIOPASDFGHJKLZXCVBNM";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_13================================

//=======================s21_strcspn_14================================
#test s21_strcspn_14
char src[] = "32jersASDASDPare[0g9jf m07y271234567890";
char res[] = "1234567890qwertyuiopasdfghjklczxcvbnm";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_14================================

//=======================s21_strcspn_15================================
#test s21_strcspn_15
char src[] =
    "33333333333333333333333333333333333333333333333333333333333333333333333333"
    "333333333333";
char res[] =
    "11111111111111111111111111111111111111111111111111111111111111111111111111"
    "111111111113";

ck_assert_int_eq(s21_strcspn(res, src), strcspn(res, src));
//=======================s21_strcspn_15================================

//=======================s21_strpbrk_1================================
#test s21_strpbrk_1
char str1[] = "";
char str2[] = "";

ck_assert_pstr_eq(s21_strpbrk(str1, str2), strpbrk(str1, str2));
//=======================s21_strpbrk_1================================

//=======================s21_strpbrk_2================================
#test s21_strpbrk_2
char str1[] = "floppy";
char str2[] = "";

ck_assert_pstr_eq(s21_strpbrk(str1, str2), strpbrk(str1, str2));
//=======================s21_strpbrk_2================================

//=======================s21_strpbrk_3================================
#test s21_strpbrk_3
char str1[] = "";
char str2[] = "floppy";

ck_assert_pstr_eq(s21_strpbrk(str1, str2), strpbrk(str1, str2));
//=======================s21_strpbrk_3================================

//=======================s21_strpbrk_4================================
#test s21_strpbrk_4
char str1[] = "poki doki";
char str2[] = "o";

ck_assert_pstr_eq(s21_strpbrk(str1, str2), strpbrk(str1, str2));
//=======================s21_strpbrk_4================================

//=======================s21_strpbrk_5================================
#test s21_strpbrk_5
char str1[] = "poki doki";
char str2[] = "i";

ck_assert_pstr_eq(s21_strpbrk(str1, str2), strpbrk(str1, str2));
//=======================s21_strpbrk_5================================

//=======================s21_strpbrk_6================================
#test s21_strpbrk_6
char str1[] = "poki doki";
char str2[] = "p";

ck_assert_pstr_eq(s21_strpbrk(str1, str2), strpbrk(str1, str2));
//=======================s21_strpbrk_6================================

//=======================s21_strpbrk_7================================
#test s21_strpbrk_7
char str1[] = "ppppppppppppP";
char str2[] = "P";

ck_assert_pstr_eq(s21_strpbrk(str1, str2), strpbrk(str1, str2));
//=======================s21_strpbrk_7================================

//=======================s21_strpbrk_8================================
#test s21_strpbrk_8
char str1[] = "ppppppppppppP";
char str2[] = "\0";

ck_assert_pstr_eq(s21_strpbrk(str1, str2), strpbrk(str1, str2));
//=======================s21_strpbrk_8================================

//=======================s21_strrchr_1================================
#test s21_strrchr_1
char str1[] = "";
char str2 = '\0';

ck_assert_pstr_eq(s21_strrchr(str1, str2), strrchr(str1, str2));
//=======================s21_strrchr_1================================

//=======================s21_strrchr_2================================
#test s21_strrchr_2
char str1[] = "floppy";
char str2 = '\0';

ck_assert_pstr_eq(s21_strrchr(str1, str2), strrchr(str1, str2));
//=======================s21_strrchr_2================================

//=======================s21_strrchr_3================================
#test s21_strrchr_3
char str1[] = "";
char str2 = 'f';

ck_assert_pstr_eq(s21_strrchr(str1, str2), strrchr(str1, str2));
//=======================s21_strrchr_3================================

//=======================s21_strrchr_4================================
#test s21_strrchr_4
char str1[] = "poki doki";
char str2 = 'o';

ck_assert_pstr_eq(s21_strrchr(str1, str2), strrchr(str1, str2));
//=======================s21_strrchr_4================================

//=======================s21_strrchr_5================================
#test s21_strrchr_5
char str1[] = "poki doki";
char str2 = 'i';

ck_assert_pstr_eq(s21_strrchr(str1, str2), strrchr(str1, str2));
//=======================s21_strrchr_5================================

//=======================s21_strrchr_6================================
#test s21_strrchr_6
char str1[] = "poki p dokip";
char str2 = 'p';

ck_assert_pstr_eq(s21_strrchr(str1, str2), strrchr(str1, str2));
//=======================s21_strrchr_6================================

//=======================s21_strrchr_7================================
#test s21_strrchr_7
char str1[] = "ppPpppppppppP";
char str2 = 'P';

ck_assert_pstr_eq(s21_strrchr(str1, str2), strrchr(str1, str2));
//=======================s21_strrchr_7================================

//=======================s21_strrchr_8================================
#test s21_strrchr_8
char str1[] = "123456789";
char str2 = '0';

ck_assert_pstr_eq(s21_strrchr(str1, str2), strrchr(str1, str2));
//=======================s21_strrchr_8================================

//=======================s21_strspn_1================================
#test s21_strspn_1
char src[] = "";
char res[] = "";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_1================================

//=======================s21_strspn_2================================
#test s21_strspn_2
char src[] = "gora";
char res[] = "";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_2================================

//=======================s21_strspn_3================================
#test s21_strspn_3
char src[] = "";
char res[] = "gora";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_3================================

//=======================s21_strspn_4================================
#test s21_strspn_4
char src[] = "gora";
char res[] = "gOra";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_4================================

//=======================s21_strspn_5================================
#test s21_strspn_5
char src[] = "123";
char res[] = "123";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_5================================

//=======================s21_strspn_6================================
#test s21_strspn_6
char src[] = "12345";
char res[] = "123";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_6================================

//=======================s21_strspn_7================================
#test s21_strspn_7
char src[] = "123";
char res[] = "12345";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_7================================

//=======================s21_strspn_8================================
#test s21_strspn_8
char src[] = "1234567890";
char res[] = "0987654321";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_8================================

//=======================s21_strspn_9================================
#test s21_strspn_9
char src[] = "1A2A3A4A5A";
char res[] = "123";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_9================================

//=======================s21_strspn_10================================
#test s21_strspn_10
char src[] = "a1aaa23aaa41235";
char res[] = "123";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_10================================

//=======================s21_strspn_11================================
#test s21_strspn_11
char src[] = "absD";
char res[] = "aD";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_11================================

//=======================s21_strspn_12================================
#test s21_strspn_12
char src[] = "32ASDASDPare[0g9jf m07y271234567890";
char res[] = "0987654321";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_12================================

//=======================s21_strspn_13================================
#test s21_strspn_13
char src[] = "32ASDASDPare[0g9jf m07y271234567890";
char res[] = "1234567890QWERTYUIOPASDFGHJKLZXCVBNM";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_13================================

//=======================s21_strspn_14================================
#test s21_strspn_14
char src[] = "32jersASDASDPare[0g9jf m07y271234567890";
char res[] = "1234567890qwertyuiopasdfghjklczxcvbnm";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_14================================

//=======================s21_strspn_15================================
#test s21_strspn_15
char src[] =
    "33333333333333333333333333333333333333333333333333333333333333333333333333"
    "333333333333";
char res[] =
    "11111111111111111111111111111111111111111111111111111111111111111111111111"
    "111111111113";

ck_assert_int_eq(s21_strspn(res, src), strspn(res, src));
//=======================s21_strspn_15================================

//=======================s21_strstr_1================================
#test s21_strstr_1
char haystack[] = "";
char needle[] = "";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_1================================

//=======================s21_strstr_2================================
#test s21_strstr_2
char haystack[] = "";
char needle[] = "jho1faQsdkjnSa3aefwf8hiuJafeHioj";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_2================================

//=======================s21_strstr_3================================
#test s21_strstr_3
char haystack[] = "safQhilufas7MaSef2345wknwefnkjHawe2fhilu";
char needle[] = "";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_3================================

//=======================s21_strstr_4================================
#test s21_strstr_4
char haystack[] = "You are toxic!";
char needle[] = "toxic";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_4================================

//=======================s21_strstr_5================================
#test s21_strstr_5
char haystack[] = "There is no right word in this test!";
char needle[] = "NOT";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_5================================

//=======================s21_strstr_6================================
#test s21_strstr_6
char haystack[] = "AbOBosNyTSa";
char needle[] = "aBoboSNYTsa";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_6================================

//=======================s21_strstr_7================================
#test s21_strstr_7
char haystack[] = "AD AD AD";
char needle[] = "AD";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_7================================

//=======================s21_strstr_8================================
#test s21_strstr_8
char haystack[] = "1";
char needle[] = "1";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_8================================

//=======================s21_strstr_9================================
#test s21_strstr_9
char haystack[] = "1";
char needle[] = "1";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_9================================

//=======================s21_strstr_10================================
#test s21_strstr_10
char haystack[] =
    "13625523478437263475984675342345sdghyftrg freshtsyASFWEt wEafe";
char needle[] = " ";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_10================================

//=======================s21_strstr_11================================
#test s21_strstr_11
char haystack[] = "-";
char needle[] = "1234567890qwertyuiopasdfghjk-";

ck_assert_pstr_eq(s21_strstr(haystack, needle), strstr(haystack, needle));
//=======================s21_strstr_11================================

//=======================s21_strerror_1================================
#test s21_strerror_1
for (int i = -1000; i < 150; i++) {
  char *got = s21_strerror(i);
  char *expected = strerror(i);

  ck_assert_str_eq(got, expected);
}
//=======================s21_strerror_1================================

//=======================s21_strerror_2================================
#test s21_strerror_2
char *got = s21_strerror(-1);
char *expected = strerror(-1);

ck_assert_str_eq(got, expected);
//=======================s21_strerror_2================================

//=======================d_spec================================

#test check_d_spec_default__________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 173;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_many_spec_default____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%d%d%d%d%d %d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data[6] = {173, -12, 134, 34, 0, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_default_with_text_______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 344;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_width_digit_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 23423;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_width_star______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 531;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_accuracy_digit__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_accuracy_zero___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_accuracy_star___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_length_h________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hd)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_length_l________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%ld)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_length_L________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Ld)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_flags_plus______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 10124;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_flags_minus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 10124;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_flags_zero______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_flags_space_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_flags_grid______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#d)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_width_length_flags_1____________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hd)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_spec_width_length_flags_2____________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3ld)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_d_simple_int__________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "This is a simple value %d";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 69;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_width_int___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%5d";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 69;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_plus_width_int______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%+12d";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 69;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_star_width_int______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%0*d";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 69;

int a = s21_sprintf(str1, format, 5, val);
int b = sprintf(str2, format, 5, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_flags_another_long_int______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%0.*ld";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long val = 8581385185;

int a = s21_sprintf(str1, format, 5, val);
int b = sprintf(str2, format, 5, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_zero_precision_zero_int_____________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%.0d";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 0;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_space_flag_int______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "% d";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 0;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_test_one_dec________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%d", 666);
int b = sprintf(str2, "%d", 666);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_test_many_dec_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%d%d%d%d", -999, 0, 666, -100);
int b = sprintf(str2, "%d%d%d%d", -999, 0, 666, -100);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_test_sprintf30______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%-.1d";

int a = s21_sprintf(str1, format, 111);
int b = sprintf(str2, format, 111);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_d_test_sprintf1_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%10ld";

int a = s21_sprintf(str1, format, 1);
int b = sprintf(str2, format, 1);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_d_test_sprintf4_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%+5.5d aboba";

int val = 10000;
int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_int_eq(a, b);

ck_assert_str_eq(str1, str2);

//=======================d_spec================================

//=======================i_spec================================

#test check_i_spec_default_________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 173.123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_many_spec_default____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%i%i%i%i%i %i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data[6] = {173, -12.123, 134.123f, 34, 0, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_default_with_text_______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_width_digit_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_width_star______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_accuracy_digit__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_accuracy_zero___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_accuracy_star___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_length_h________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hi)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_length_l________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%li)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_length_L________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Li)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_flags_plus______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_flags_minus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_flags_zero______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_flags_space_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_flags_grid______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#i)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_width_length_flags_1____________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hi)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_spec_width_length_flags_2____________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3li)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_i_precise_int_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%.5i";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 69;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_i_minus_width_int_____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%-5i";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 69;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_i_padding_int_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%012i";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 69;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_i_star_precision_int__________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%0.*i";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 69;

int a = s21_sprintf(str1, format, 5, val);
int b = sprintf(str2, format, 5, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_i_flags_long_int______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%+5.31li";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long int val = 698518581899;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_i_flags_short_int_____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%-16.9hi";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
short int val = 6958;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_i_test_one_int________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%i", -0);
int b = sprintf(str2, "%i", -0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_i_test_many_int_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%i%i%i%i", -999, 0, 666, -100);
int b = sprintf(str2, "%i%i%i%i", -999, 0, 666, -100);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

//=======================i_spec================================

//=======================e_spec================================

#test check_e_spec_default_________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 173.123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_many_spec_default____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%e%e%e%e%e %e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data[6] = {173, -12.123, 134.123f, 34.234, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_default_with_text_______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_width_digit_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_width_star______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_accuracy_digit__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_accuracy_zero___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_accuracy_star___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_length_h________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%he)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_length_l________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%le)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
float test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_length_L________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Le)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_flags_plus______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_flags_minus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_flags_zero______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_flags_space_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_flags_grid______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#e)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_width_length_flags_1____________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*he)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_spec_width_length_flags_2____________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3le)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_e_precision___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.17Le";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 15.35;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_precision_zero______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.0Le";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 15.35;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_precision_empty_____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.Le";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 15.000009121;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_precision_huge______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.13Le";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 0.00000000123;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_precision_huge_negative_____________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.15Le";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = -15.35581134;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_huge________________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%Le";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 72537572375.1431341;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_flags_______________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%015E";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
float val = 0;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_width_______________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%15e";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
float val = 0;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_many________________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "% .0e %.le %Le %e %le %Le";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
float val = 0;
double val1 = 0;
long double val2 = 3515315.153151;
float val3 = 5.5;
double val4 = 0.094913941;
long double val5 = 95919539159.53151351131;

int a = s21_sprintf(str1, format, val, val1, val2, val3, val4, val5);
int b = sprintf(str2, format, val, val1, val2, val3, val4, val5);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_int_________________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.17LE";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 4134121;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_e_test_sprintf31______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%e";
double x = 111;

int a = s21_sprintf(str1, format, x);
int b = sprintf(str2, format, x);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_e_test_sprintf32______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%e%e%e%e";

int a = s21_sprintf(str1, format, 11.111, 222.2222, 666., -555.125);
int b = sprintf(str2, format, 11.111, 222.2222, 666., -555.125);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_e_test_sprintf33______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%Le";
long double x = 122.1231;

int a = s21_sprintf(str1, format, x);
int b = sprintf(str2, format, x);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_e_test_sprintf35______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.10e";

int a = s21_sprintf(str1, format, 111.184314818);
int b = sprintf(str2, format, 111.184314818);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_e_test_sprintf37______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%E";

int a = s21_sprintf(str1, format, 0.666666);
int b = sprintf(str2, format, 0.666666);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_e_test_sprintf38______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%E%E%E";

int a = s21_sprintf(str1, format, 0.0000999, 111.9999, 6.666);
int b = sprintf(str2, format, 0.0000999, 111.9999, 6.666);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================e_spec================================

//=======================E_spec================================

#test check_E_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 9.881313E-3;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%E%E%E%E%E %E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data[6] = {173, -12.123, 134.123f, 9.881313E-6, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hE)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lE)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%LE)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#E)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hE)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_E_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lE)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

//=======================E_spec================================

//=======================f_spec================================

#test check_f_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 3;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%f%f%f%f%f %f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data[6] = {173, -12.123, 134.123f, 9.881313E-6, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hf)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Lf)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double test_data = 17492.3;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-13f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#f)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hf)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lf)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_f_float_precision_____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%Lf";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 513515.131513515151351;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_float_width_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%10Lf";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 15.35;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_float_precision_zero________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.0Lf";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 15.35;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_float_precision_empty_______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.Lf";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 15.35;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_float_precision_huge________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.15Lf";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 15.35;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_float_precision_huge_negative_______________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%.15Lf";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = -15.35581134;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_float_huge__________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%Lf";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double val = 72537572375.1431341;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_float_flags_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "% f";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
float val = 0;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_float_many__________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "% .0f %.lf %Lf %f %lf %Lf";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
float val = 0;
double val1 = 0;
long double val2 = 3515315.153151;
float val3 = 5.5;
double val4 = 9851.51351;
long double val5 = 95919539159.53151351131;

int a = s21_sprintf(str1, format, val, val1, val2, val3, val4, val5);
int b = sprintf(str2, format, val, val1, val2, val3, val4, val5);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_test_one_float______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%f", 0.0001);
int b = sprintf(str2, "%f", 0.0001);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_test_many_float_____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%f%f%f%f", -999.666, 0.0001, 666.999, -100.001);
int b = sprintf(str2, "%f%f%f%f", -999.666, 0.0001, 666.999, -100.001);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_f_test_sprintf2_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%1.1f";

int a = s21_sprintf(str1, format, 1.1);
int b = sprintf(str2, format, 1.1);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_test_sprintf6_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%7.7f";

int a = s21_sprintf(str1, format, 11.123456);
int b = sprintf(str2, format, 11.123456);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_test_sprintf25______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.f";

int a = s21_sprintf(str1, format, 121.123);
int b = sprintf(str2, format, 121.123);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_test_sprintf29______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%-.f";

int a = s21_sprintf(str1, format, 111.111);
int b = sprintf(str2, format, 111.111);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_test_sprintf41______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.Lf";
long double c = 7.9418438184;

int a = s21_sprintf(str1, format, c);
int b = sprintf(str2, format, c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_inf
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%Lf";
long double c = INFINITY;

int a = s21_sprintf(str1, format, c);
int b = sprintf(str2, format, c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_negative_infinity
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%Lf";
long double c = -INFINITY;

int a = s21_sprintf(str1, format, c);
int b = sprintf(str2, format, c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_nan
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%Lf";
long double c = NAN;

int a = s21_sprintf(str1, format, c);
int b = sprintf(str2, format, c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_hash__zero
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%#f";
double c = 0;

int a = s21_sprintf(str1, format, c);
int b = sprintf(str2, format, c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_hash_negative_zero
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%#f";
double c = 0;
c *= -1;

int a = s21_sprintf(str1, format, c);
int b = sprintf(str2, format, c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_f_hash_accuracy_zero
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%#.f";
double c = 0;

int a = s21_sprintf(str1, format, c);
int b = sprintf(str2, format, c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================f_spec================================

//=======================g_spec================================

#test check_g_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 123.45242314;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%g %g %g %g %g %g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data[6] = {173, -12.123, 134.123f, 123.346, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.16g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hg)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lg)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Lg)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#g)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hg)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lg)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_g_trailing_zero_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%g";
double hex = 0.50300;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_large_______________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%g";
double hex = 5131.43141;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_small_______________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%g";
double hex = 0.123000;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_precision___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.5g";
double hex = 0.123000;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_precision_zero______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.0g";
double hex = 0.123000;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_precision_missing___________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.g";
double hex = 0.123000;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_many_zeroes_in_front________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.g";
double hex = 0.0004;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_one_zero____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%g";
double hex = 0;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_zero________________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.5g";
double hex = 0;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_mantiss_____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%g";
double hex = 0.0000005;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_mantiss_flags_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%5.8g";
double hex = 0.0000005;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_short_no_mantiss____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%g";
double hex = 0.005;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_LG__________________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%LG";
long double hex = 0.000005;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_g_many________________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%LG %g %G %Lg %.5g";
long double hex = 0.000005;
double hex1 = 41.1341;
double hex2 = 848.9000;
long double hex3 = 0.0843;
double hex4 = 0.0005;
double hex5 = 0.8481481;

int a = s21_sprintf(str1, format, hex, hex1, hex2, hex3, hex4, hex5);
int b = sprintf(str2, format, hex, hex1, hex2, hex3, hex4, hex5);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================g_spec================================

//=======================G_spec================================

#test check_G_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 123.235467;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%G %G %G %G %G %G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data[6] = {173, -12.123, 134.123f, 123.643324, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

double test_data = 17492.123f;
char *format = "Check the digit: (%.10G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hG)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lG)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
float test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%LG)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long double test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#G)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hG)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_G_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lG)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
double test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

//=======================G_spec================================

//=======================o_spec================================

#test check_o_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 9.881313E-324;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%o%o%o%o%o %o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data[6] = {173, -12.123, 134.123f, 9.881313E-324, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%ho)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lo)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Lo)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#o)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*ho)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lo)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_o_octal_width_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%15o";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_flags_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%-16o";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_precision_____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%.51o";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_many_flags____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%-5.51o";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_zero__________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%o";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int a = s21_sprintf(str1, format, 0);
int b = sprintf(str2, format, 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_hash__________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#o";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int val = 57175;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_short_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%ho";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
short int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_long__________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%lo";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long int val = 949149114140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_many__________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%lo, %o, %ho, %.5o, %5.o";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long int val = 949149114140;

int a = s21_sprintf(str1, format, val, 14, 1441, 14414, 9681);
int b = sprintf(str2, format, val, (unsigned)14, (unsigned short)1441,
                (unsigned)14414, (unsigned)9681);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_octal_______________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%lo";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
long int val = 84518;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_o_test_sprintf43______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%.5o";

int a = s21_sprintf(str1, format, 12345);
int b = sprintf(str2, format, 12345);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================o_spec================================

//=======================u_spec================================

#test check_u_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 9.881313E-324;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%u%u%u%u%u %u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data[6] = {173, -12.123, 134.123f, 9.881313E-324, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hu)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lu)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Lu)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_flags_plus_1___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_flags_plus_2___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#u)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hu)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lu)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_u_unsigned_val________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%u";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_unsigned_val_width__________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%15u";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_unsigned_val_flags__________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%-16u";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_unsigned_val_precision______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%.51u";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_unsigned_val_many_flags_____________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "% 5.51u";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_unsigned_val_short__________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%hu";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned short int val = 14140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_unsigned_val_long___________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%lu";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned long int val = 949149114140;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_unsigned_val_many___________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%lu, %u, %hu, %.5u, %5.u";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned long int val = 949149114140;

int a = s21_sprintf(str1, format, val, 14, 1441, 14414, 9681);
int b = sprintf(str2, format, val, (unsigned)14, (unsigned short)1441,
                (unsigned)14414, (unsigned)9681);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_unsigned_zero_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%u";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int a = s21_sprintf(str1, format, 0);
int b = sprintf(str2, format, (unsigned)0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_test_one_unsigned_dec_______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%u", 100);
int b = sprintf(str2, "%u", (unsigned)100);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_test_many_unsigned_dec______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%u%u%u%u", 999, 0, 666, 100);
int b = sprintf(str2, "%u%u%u%u", (unsigned)999, (unsigned)0, (unsigned)666,
                (unsigned)100);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_u_test_sprintf8_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%6.6u";

int a = s21_sprintf(str1, format, 12341151);
int b = sprintf(str2, format, 12341151);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================u_spec================================

//=======================x_spec================================

#test check_x_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 9.881313E-324;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%x%x%x%x%x %x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data[6] = {173, -12.123, 134.123f, 9.881313E-324, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hx)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lx)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Lx)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#x)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hx)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lx)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_x_hex_width___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%5x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 858158158;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_flags___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#-10x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 858158158;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_precision_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%.15x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 858158158;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_many____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#-10x%x%X%#x%#X%5.5x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 858158158;

int a = s21_sprintf(str1, format, val, val, val, val, val, val);
int b = sprintf(str2, format, val, val, val, val, val, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_many_flags______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#-5.10x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 858158158;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_zero____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 0;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_huge____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 18571;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_short___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#hx";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned short val = 12352;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_long____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#lx";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned long val = 18571757371571;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_one_longer_width________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#2x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 1;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_hex_two_longer_width________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%#30x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
unsigned val = 1;

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_min______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%x", (unsigned)INT32_MIN);
int b = sprintf(str2, "%x", (unsigned)INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_0________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%x", 0);
int b = sprintf(str2, "%x", 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_max______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%x", INT32_MAX);
int b = sprintf(str2, "%x", INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_min______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%X", (unsigned)INT32_MIN);
int b = sprintf(str2, "%X", (unsigned)INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_0________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%X", 0);
int b = sprintf(str2, "%X", 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_max______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%X", INT32_MAX);
int b = sprintf(str2, "%X", INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_many_hex_lower_________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%x%x%x%x%x", 12340987, 135, 0, -1230, -123213123);
int b = sprintf(str2, "%x%x%x%x%x", 12340987, 135, 0, -1230, -123213123);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_many_hex_upper_________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%X%X%X%X%X", 12340987, 135, 0, -1230, -123213123);
int b = sprintf(str2, "%X%X%X%X%X", 12340987, 135, 0, -1230, -123213123);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_alignment_left_min__________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%-3x", (unsigned)INT32_MIN);
int b = sprintf(str2, "%-3x", (unsigned)INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_alignment_left_0____________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%-3x", 0);
int b = sprintf(str2, "%-3x", 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_alignment_left_max__________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%-3x", INT32_MAX);
int b = sprintf(str2, "%-3x", INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_alignment_right_min_________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%13x", (unsigned)INT32_MIN);
int b = sprintf(str2, "%13x", (unsigned)INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_alignment_right_0___________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%13x", 0);
int b = sprintf(str2, "%13x", 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_alignment_right_max_________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%13x", INT32_MAX);
int b = sprintf(str2, "%13x", INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_alignment_left_min__________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%-60X", INT32_MIN);
int b = sprintf(str2, "%-60X", INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_alignment_left_0____________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%-60X", 0);
int b = sprintf(str2, "%-60X", 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_alignment_left_max__________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%-60X", INT32_MAX);
int b = sprintf(str2, "%-60X", INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_alignment_right_min_________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%7X", (unsigned)INT32_MIN);
int b = sprintf(str2, "%7X", (unsigned)INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_alignment_right_0___________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%7X", 0);
int b = sprintf(str2, "%7X", 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_alignment_right_max_________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%7X", INT32_MAX);
int b = sprintf(str2, "%7X", INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_many_hex_lower_with_alignment__________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%2x%-7x%9x%11x%0x", 12340987, 100, 0, 1, -666999);
int b = sprintf(str2, "%2x%-7x%9x%11x%0x", 12340987, 100, 0, 1, -666999);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_many_hex_upper_with_alignment__________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%2X%-7X%9X%11X%0X", 12340987, 100, 0, 1, -666999);
int b = sprintf(str2, "%2X%-7X%9X%11X%0X", 12340987, 100, 0, 1, -666999);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_with_hashtag_min_______________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#x", INT32_MIN);
int b = sprintf(str2, "%#x", INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_with_hashtag_0_________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#x", 0);
int b = sprintf(str2, "%#x", 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_with_hashtag_max_______________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#x", INT32_MAX);
int b = sprintf(str2, "%#x", INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_hashtag_min_________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#X", INT32_MIN);
int b = sprintf(str2, "%#X", INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_hashtag_0___________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#X", 0);
int b = sprintf(str2, "%#X", 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_hashtag_max_________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#X", INT32_MAX);
int b = sprintf(str2, "%#X", INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_many_hex_lower_with_hashtag_and_alignm_________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#x%#x%3x%#32x%#-1x", 87, 1222224535, -13, -0,
                    123213123);
int b =
    sprintf(str2, "%#x%#x%3x%#32x%#-1x", 87, 1222224535, -13, -0, 123213123);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_many_hex_upper_with_hashtag_and_alignm_________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#X%#X%3X%#32X%#-1X", 87, 1222224535, -13, -0,
                    123213123);
int b =
    sprintf(str2, "%#X%#X%3X%#32X%#-1X", 87, 1222224535, -13, -0, 123213123);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_width_star_min______________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%*x", 11, INT32_MIN);
int b = sprintf(str2, "%*x", 11, INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_width_star_0________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%*x", 11, 0);
int b = sprintf(str2, "%*x", 11, 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_width_star_max______________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%*x", 11, INT32_MAX);
int b = sprintf(str2, "%*x", 11, INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_width_star_min______________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%*X", 11, INT32_MIN);
int b = sprintf(str2, "%*X", 11, INT32_MIN);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_width_star_0________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%*X", 11, 0);
int b = sprintf(str2, "%*X", 11, 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_width_star_max______________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%*X", 11, INT32_MAX);
int b = sprintf(str2, "%*X", 11, INT32_MAX);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_many_hex_lower_width_star_align_and_hashtag____
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#*x%*x%-12x%3x%*x", 9, 127312897, 0, -1, 199,
                    -123978, 3, -1251);
int b = sprintf(str2, "%#*x%*x%-12x%3x%*x", 9, 127312897, 0, -1, 199, -123978,
                3, -1251);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_many_hex_upper_with_width_star_________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%#*X%*X%-12X%3X%*X", 9, 127312897, 0, -1, 199,
                    -123978, 3, -1251);
int b = sprintf(str2, "%#*X%*X%-12X%3X%*X", 9, 127312897, 0, -1, 199, -123978,
                3, -1251);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_lower_with_precision___________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%*.6x", 11, 0);
int b = sprintf(str2, "%*.6x", 11, 0);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_x_test_one_hex_upper_with_precision___________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%*.6X", 11, INT32_MIN);
int b = sprintf(str2, "%*.6X", 11, (unsigned)INT32_MIN);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_many_hex_lower_with_precision_and_other________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *format = "%#3.*x%#3x%-7.*x%#-1.8x%4.3x%#2.15x%*.*x%*.1x%3x%-1x";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int a = s21_sprintf(str1, format, 3, 126714, 4444444, 0, 6423235, 0, 666, 999,
                    13, 5, 419, 9, 41, -41, 33);
int b = sprintf(str2, format, 3, 126714, 4444444, 0, 6423235, 0, 666, 999, 13,
                5, 419, 9, 41, -41, 33);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_many_hex_upper_with_precision_and_other________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a =
    s21_sprintf(str1, "%#3.*X%#3x%-7.*X%#-1.8X%4.3X%#2.15x%*.*X%*.1X%3X%-1X", 3,
                -126714, 4444444, 0, 6423235, 0, 666, 999, 13, 5, -419, 9,

                41, -41, 33);
int b = sprintf(str2, "%#3.*X%#3x%-7.*X%#-1.8X%4.3X%#2.15x%*.*X%*.1X%3X%-1X", 3,
                -126714, 4444444, 0, 6423235, 0, 666, 999, 13, 5, -419, 9, 41,
                -41, 33);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_lower_with_length_minus_11_____________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%hx", -11);
int b = sprintf(str2, "%hx", -11);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_lower_with_length_0____________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%hx", 0);
int b = sprintf(str2, "%hx", 0);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_lower_with_length_11___________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%hx", 11);
int b = sprintf(str2, "%hx", 11);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_lower_with_length_val__________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

long unsigned int val = INT32_MAX;

int a = s21_sprintf(str1, "%lx", val);
int b = sprintf(str2, "%lx", val);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_lower_with_length_v____________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

long unsigned int v = 0;

int a = s21_sprintf(str1, "%lx", v);
int b = sprintf(str2, "%lx", v);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_upper_with_length_minus_11_____________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%hx", -11);
int b = sprintf(str2, "%hx", -11);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_upper_with_length_0____________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%hx", 0);
int b = sprintf(str2, "%hx", 0);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_upper_with_length_11___________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%hx", 11);
int b = sprintf(str2, "%hx", 11);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_upper_with_length_val__________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

long unsigned int val = INT32_MAX;

int a = s21_sprintf(str1, "%lx", val);
int b = sprintf(str2, "%lx", val);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_one_hex_upper_with_length_v____________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

long unsigned int v = 0;

int a = s21_sprintf(str1, "%lx", v);
int b = sprintf(str2, "%lx", v);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_x_test_sprintf44______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%#5lX";
long hex = 314818438141;

int a = s21_sprintf(str1, format, hex);
int b = sprintf(str2, format, hex);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================x_spec================================

//=======================X_spec================================

#test check_X_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 9.881313E-324;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%X%X%X%X%X %X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data[6] = {173, -12.123, 134.123f, 9.881313E-324, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hX)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lX)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%LX)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#X)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hX)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_X_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lX)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

//=======================X_spec================================

//=======================p_spec================================

#test check_p_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 9.881313E-324;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%X%X%X%X%X %p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data[6] = {173, -12.123, 134.123f, 9.881313E-324, 0.01, 98765};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 344.634;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 23423.523f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 531.0000;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.123f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 5.3f;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hp)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.456;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lp)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.001231230101;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Lp)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.3f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 101.24;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 1012.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 17492.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 123;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#p)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 0;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*hp)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lp)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_p_ptr_width___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%15p";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test = "asd";

int a = s21_sprintf(str1, format, test);
int b = sprintf(str2, format, test);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_p_ptr_precision_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%.5p";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test = "asd";

int a = s21_sprintf(str1, format, test);
int b = sprintf(str2, format, test);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_p_null_ptr____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%p";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *ptr = NULL;

int a = s21_sprintf(str1, format, ptr);
int b = sprintf(str2, format, ptr);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_p_ptr_________________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%p";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test = "asd";

int a = s21_sprintf(str1, format, test);
int b = sprintf(str2, format, test);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_p_test_sprintf42______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%#5p";
int c = 5;

int a = s21_sprintf(str1, format, &c);
int b = sprintf(str2, format, &c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================p_spec================================

//=======================n_spec================================

#test check_n_spec_default________________________________________
char s21_str[BUFFERSIZE] = "qwer";
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "(%n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);
ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

// #test check_n_many_spec_default___________________________________
//    char s21_str[BUFFERSIZE];
//    char original_str[BUFFERSIZE];
//    int k = 0;
//
//    char* format = "(32456 32456 32456 32456 32456 %n 24234 %n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif  //

//    int s21_res = s21_sprintf(s21_str, format, &k);
//    int orig_res = sprintf(original_str,format, &k);
//
//    ck_assert_str_eq(s21_str,original_str);
//    ck_assert_int_eq(s21_res,orig_res);

#test check_n_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);
ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%3n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);
ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

// #test check_n_spec_width_star__________________________________
//    char s21_str[BUFFERSIZE];
//    char original_str[BUFFERSIZE];
//    int k = 0;
//
//    char *format = "Check the digit: (%*n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif  //
int test_data = 531.0000;
//
//    int s21_res = s21_sprintf(s21_str, format, &k);
//    int orig_res = sprintf(original_str, format, &k);
//
//    ck_assert_str_eq(s21_str, original_str);
//    ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%.15n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);
ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%.0n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

// #test check_n_spec_accuracy_star_______________________________
//    char s21_str[BUFFERSIZE];
//    char original_str[BUFFERSIZE];
//    int k = 0;
//
//    char *format = "Check the digit: (%.*n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif  //

//    int s21_res = s21_sprintf(s21_str, format, &k);
//    int orig_res = sprintf(original_str, format, &k);
//
//    ck_assert_str_eq(s21_str, original_str);
//    ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%hn)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
long int value_res_s21 = 0;
long value_res_orig = 0;

char *format = "Check the digit: (%ln)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%+12n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%-12n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%0n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (% n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Check the digit: (%#n)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

// #test check_n_spec_width_length_flags_1________________________
//    char s21_str[BUFFERSIZE];
//    char original_str[BUFFERSIZE];
//    int k = 0;
//
//    char *format = "Check the digit: (%0*hn)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif  //

//    int s21_res = s21_sprintf(s21_str, format, &k);
//    int orig_res = sprintf(original_str, format, &k);
//
//    ck_assert_str_eq(s21_str, original_str);
//    ck_assert_int_eq(s21_res, orig_res);

#test check_n_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
long int value_res_s21 = 0;
long int value_res_orig = 0;

char *format = "Check the digit: (%#3ln)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_n_specifier___________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];
int value_res_s21 = 0;
int value_res_orig = 0;

char *format = "Hello, my sexy little aboba abobushka abobina %n";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int s21_res = s21_sprintf(s21_str, format, &value_res_s21);
int orig_res = sprintf(original_str, format, &value_res_orig);

ck_assert_int_eq(value_res_s21, value_res_orig);
ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

//=======================n_spec================================

//=======================c_spec================================

#test check_c_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(123%c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char test_data = '1';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%c %c %c %c%c %c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char test_data[6] = {'1', '1', '\t', '6', 's', '6'};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = '2';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%3c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = '1';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%*c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 'a';

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.15c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 'c';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.0c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = '\0';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%.*c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = '1';

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%hc)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 's';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_length_l_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%lc)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 'a';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_length_L_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%Lc)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 'a';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%+12c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 'a';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%-12c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 's';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 's';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (% c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = '1';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 'c';

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%0*c)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4;

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_spec_width_length_flags_2___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the digit: (%#3lc)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
int test_data = 42.4f;

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_c_one_char____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%c";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char val = 'X';

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_one_precision_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%.5c";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char val = 'c';

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_one_flags___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "% -5c";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char val = 'c';

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_one_width___________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%15c";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char val = 'c';

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_one_many____________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%-5.3c%c%c%c%c Hello! ABOBA";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char val = 'c';

int a = s21_sprintf(str1, format, val, 'c', 'a', 'b', 'b');
int b = sprintf(str2, format, val, 'c', 'a', 'b', 'b');
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_one_many_flags______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%-5.3c";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char val = 'c';

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_test_one_char_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%c", '\t');
int b = sprintf(str2, "%c", '\t');
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_test_many_char______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%c%c%c%c%c", '\t', '\n', '0', 'S', 's');
int b = sprintf(str2, "%c%c%c%c%c", '\t', '\n', '0', 'S', 's');
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_test_one_char_with_alignment_left___________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%8c", '\t');
int b = sprintf(str2, "%8c", '\t');
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_test_one_char_with_alignment_right__________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%-8c", '\t');
int b = sprintf(str2, "%-8c", '\t');
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_test_many_char_with_alignment_______________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%3c%-11c%10c%-2c%c", '\t', '\n', '0', 'S', 's');
int b = sprintf(str2, "%3c%-11c%10c%-2c%c", '\t', '\n', '0', 'S', 's');
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_test_sprintf3_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%8.3c";

int a = s21_sprintf(str1, format, 'a');
int b = sprintf(str2, format, 'a');
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_c_width_char__________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "This is a simple wide char %5c";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char w = 'c';
int a = s21_sprintf(str1, format, w);
int b = sprintf(str2, format, w);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_c_test_sprintf16______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "% c";

int a = s21_sprintf(str1, format, 'a');
int b = sprintf(str2, format, 'a');
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================c_spec================================

//=======================s_spec================================

#test check_s_spec_default________________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(123%s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "为什么他对自己说话";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_many_spec_default___________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "(%s %s %s %s %s %s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data[6] = {"ad", "1ba刀", "\t", "一​把​刀", "我想睡觉", "6"};

int s21_res =
    s21_sprintf(s21_str, format, test_data[0], test_data[1], test_data[2],
                test_data[3], test_data[4], test_data[5]);
int orig_res = sprintf(original_str, format, test_data[0], test_data[1],
                       test_data[2], test_data[3], test_data[4], test_data[5]);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_default_with_text______________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "今天太冷";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_width_digit____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%3s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "сверлим";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_width_star_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%*s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "安德鲁不会编程得好";

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_accuracy_digit_________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%.5s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "abcdef";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_accuracy_zero__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%.0s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "为什么他对自己说话";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_accuracy_star__________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%.*s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "asdasd";

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_length_h_______________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%hs)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "asd";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_flags_plus_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%+12s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "asg6";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_flags_minus____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%-12s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "dfgdfg5";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_flags_zero_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%0s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "24dfg65";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_flags_space____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (% s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "aasd35645ff";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_flags_grid_____________________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%#s)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "aasd35645ff";

int s21_res = s21_sprintf(s21_str, format, test_data);
int orig_res = sprintf(original_str, format, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_spec_width_length_flags_1___________________________
char s21_str[BUFFERSIZE];
char original_str[BUFFERSIZE];

char *format = "Check the string: (%0*hs)";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *test_data = "aasd35645ff";

int s21_res = s21_sprintf(s21_str, format, 3, test_data);
int orig_res = sprintf(original_str, format, 3, test_data);

ck_assert_str_eq(s21_str, original_str);
ck_assert_int_eq(s21_res, orig_res);

#test check_s_string______________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%s";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *val = "I LOVE STRINGS AND TESTS AND SCHOOL21 NO JOKE";

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_string_precision____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%.15s";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *val = "I LOVE STRINGS AND TESTS AND SCHOOL21 NO JOKE";

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_string_width________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%15s";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *val = "69 IS MY FAVORITE NUMBER";

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_string_flags________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%-15.9s";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *val = "69 IS MY FAVORITE NUMBER";

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_string_long_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%s";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *val =
    "69 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_string_many_________________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char *format = "%s%s%s%s";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif
char *val =
    "69 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
char *s1 = "";
char *s2 = "87418347813748913749871389480913";
char *s3 = "HAHAABOBASUCKER";

int a = s21_sprintf(str1, format, val, s1, s2, s3);
int b = sprintf(str2, format, val, s1, s2, s3);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_string_width_huge___________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char *val = "kjafdiuhfjahfjdahf";
char *format = "%120s";
#ifdef LEAK_TEST
PRINT_TEST_FORMAT
#endif

int a = s21_sprintf(str1, format, val);
int b = sprintf(str2, format, val);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_test_one_string_____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%s", "Drop Sega PLS");
int b = sprintf(str2, "%s", "Drop Sega PLS");
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_test_many_string____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "%s%s%s%s%s", "Drop", " ", "Sega", " ", "PLS");
int b = sprintf(str2, "%s%s%s%s%s", "Drop", " ", "Sega", " ", "PLS");
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_s_test_sprintf7_______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%7.4s";

int a = s21_sprintf(str1, format, "aboba floppa");
int b = sprintf(str2, format, "aboba floppa");
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_s_test_sprintf17______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "% s";

int a = s21_sprintf(str1, format, "aboba likes floppa");
int b = sprintf(str2, format, "aboba likes floppa");
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_s_test_sprintf19______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%210s";

int a = s21_sprintf(str1, format, "AHHAHAHA\0AHHAHAHAH");
int b = sprintf(str2, format, "AHHAHAHA\0AHHAHAHAH");
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_s_test_sprintf20______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%-115s";

int a = s21_sprintf(str1, format, "Nick her");
int b = sprintf(str2, format, "Nick her");
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_s_test_sprintf27______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%%%%%%%%";

int a = s21_sprintf(str1, "%s", format);
int b = sprintf(str2, "%s", format);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_s_test_null_dest______________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%%%%%%%%";

int a = s21_sprintf(str1, "%s", NULL);
int b = sprintf(str2, "%s", NULL);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================s_spec================================

//=======================NonSpec_spec================================

#test check_NonSpec_all_empty_____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "abc");
int b = sprintf(str2, "abc");
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_NonSpec_empty_format_and_parameters___________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

int a = s21_sprintf(str1, "abc");
int b = sprintf(str2, "abc");
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_NonSpec_test_sprintf26________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%%";

int a = s21_sprintf(str1, format);
int b = sprintf(str2, format);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_NonSpec_test_sprintf27________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%%%%%%%%%%%%%%%%%%";

int a = s21_sprintf(str1, format);
int b = sprintf(str2, format);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_NonSpec_test_sprintf28________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%% %%%% %% % %%%% %%%%%";

int a = s21_sprintf(str1, format);
int b = sprintf(str2, format);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//=======================NonSpec_spec================================

#test check_i_d_many_flags_many_ints______________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];

char format[] = "%0.*i %d %4.*i %013d %d";
int val = 69;

int a = s21_sprintf(str1, format, 5, val, -10431, 13, 5311, 0, -581813581);
int b = sprintf(str2, format, 5, val, -10431, 13, 5311, 0, -581813581);
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(a, b);

#test check_d_i_u_test_sprintf9___________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%li%ld%lu";

int a = s21_sprintf(str1, format, 666666666666, 777, 111);
int b = sprintf(str2, format, 666666666666, 777, 111);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_d_i_u_test_sprintf10__________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%hi%hd%hu";

int a = s21_sprintf(str1, format, 666, -777, 111);
int b = sprintf(str2, format, 666, -777, 111);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_d_i_u_f_test_sprintf11________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%+li%+lu%+d%+lf";

int a = s21_sprintf(str1, format, -123, 321, -5555, -1213.123);
int b = sprintf(str2, format, -123, 321, -5555, -1213.123);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_d_i_u_f_test_sprintf12________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%-11.11li%-35.5lu%-3.5ld%33.19Lf";
long double k = 333.33213;

int a = s21_sprintf(str1, format, 66666666666, 5555555555, 44444444444, k);
int b = sprintf(str2, format, 66666666666, 5555555555, 44444444444, k);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_d_i_u_f_test_sprintf14________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "% 0.0li% 0.0lu% 0.0ld % 0.0lf";

int a = s21_sprintf(str1, format, 1, 222, 33333333333, -166513.1232);
int b = sprintf(str2, format, 1, 222, 33333333333, -166513.1232);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_d_i_u_f_test_sprintf15________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "% 0.0hi% 0.0hu% 0.0hd % 0.0hf";

int a = s21_sprintf(str1, format, 1, 222, 33333333333, -166513.1232);
int b = sprintf(str2, format, 1, 222, 33333333333, -166513.1232);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_c_s_test_sprintf18____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "% s% c";

int a = s21_sprintf(str1, format, "", 'f');
int b = sprintf(str2, format, "", 'f');
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_c_d_i_f_s_utest_sprintf24_____________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%+2.1c%+4.2d%+5.4i%+10.2f%+55.55s%+1.1u";

int a = s21_sprintf(str1, format, 'f', 21, 42, 666.666,
                    "Lorem ipsum dolor sit amet. Aut quam ducimus.", 11);
int b = sprintf(str2, format, 'f', 21, 42, 666.666,
                "Lorem ipsum dolor sit amet. Aut quam ducimus.", 11);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_d_n_test_sprintf28____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
int n1;
int n2;
int a = s21_sprintf(str1, "%d%n", 123, &n1);
int b = sprintf(str2, "%d%n", 123, &n2);

ck_assert_int_eq(a, b);
ck_assert_int_eq(n1, n2);
ck_assert_str_eq(str1, str2);

#test check_e_f_test_sprintf36____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%5.3e%3.2e%lf";

int a = s21_sprintf(str1, format, 0.000111, 111.555, 1.999);
int b = sprintf(str2, format, 0.000111, 111.555, 1.999);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_e_f_test_sprintf39____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%e ABOBA %Lf %Lf %Le";
long double c = 848181;
long double d = 0.00000001;
long double e = 1111111.11;

int a = s21_sprintf(str1, format, 123.123, d, e, c);
int b = sprintf(str2, format, 123.123, d, e, c);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

#test check_e_f_test_sprintf40____________________________________
char str1[BUFFERSIZE];
char str2[BUFFERSIZE];
char format[] = "%#e Floppa %#E%#f";

int a = s21_sprintf(str1, format, 123.111, 0.0000999, 0.555);
int b = sprintf(str2, format, 123.111, 0.0000999, 0.555);
ck_assert_int_eq(a, b);
ck_assert_str_eq(str1, str2);

//======================Additional_tests==============================

#test EOF1
char fstr[] = "%d";
char str[] = "        ";

int16_t res1 = s21_sscanf(str, fstr, 0);
int16_t res2 = sscanf(str, fstr, 100);
ck_assert_int_eq(res1, res2);

#test EOF2
char fstr[] = "%d ";
char str[] = "               ";
int16_t a1 = 0, a2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1);
int16_t res2 = sscanf(str, fstr, &a2);
ck_assert_int_eq(res1, res2);

#test EOF3
char fstr[] = "%d ";
char str[] = "  ";
int16_t a1 = 0, a2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1);
int16_t res2 = sscanf(str, fstr, &a2);
ck_assert_int_eq(res1, res2);

#test only_chars1
char fstr[] = "%c %c %c %c";
char str[] = "   a     b c d";
int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test only_chars2
char fstr[] = "%c%c%c%c";
char str[] = "abcd";
int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test only_chars3
char fstr[] = "%c %c %c      %c";
char str[] = "1 a 3   c           ";
int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test only_chars4
char fstr[] = "%c %c %c %c";
char str[] = "   000 0    ";
int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test only_chars5
char fstr[] = "%c %c %c %c";
char str[] = "tttt";
int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test special_symbols_as_chars1
char fstr[] = "%c%c%c%c";
char str[] = "\\\n\t\t\t";
int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test special_symbols_as_chars2
char fstr[] = "%c %c %c %c";
char str[] = "z ' ' /";
int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test special_symbols_as_chars3
char fstr[] = "%c%*c%c%c";
char str[] = "ABCD";
int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);

int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);

#test chars_flags1
char fstr[] = "%c %c %c %c";
char str[] = "z *'@";
int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test chars_flags2
char fstr[] = "%1c %c %c %0c";
char str[] = "z *'@";
int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test chars_flags3
char fstr[] = "%c %c %c %c";
char str[] = "z *'@";
int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test chars_flags4
char fstr[] = "%c %c %c %c";
char str[] = "z *'@";
int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test chars_flags5
char fstr[] = "%*c%*c%*c%c";
char str[] = "abcde";
int16_t a1 = 0, a2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1);
int16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test chars_aster1
char fstr[] = "%*c%*c%*c%*c";
char str[] = "   c ";
int16_t a1 = 0, a2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1);
int16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test chars_aster2
char fstr[] = "%*c%*c%*c%c";
char str[] = "abcd ";
int16_t a1 = 0, a2 = 0;

int16_t res1 = s21_sscanf(str, fstr, &a1);
int16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test only_ints1
long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char fstr[] = "%ld %ld %ld %ld";
const char str[] = "555 666 777 888";

int32_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int32_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test only_ints2
int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1337 21 5008 3000";
const char fstr[] = "%hd %hd %hd %hd";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test only_ints3
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1337 21 5008 300004";
const char fstr[] = "%lld %lld %lld %lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test ints_nwidth1
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1337 21 5008 300004";
const char fstr[] = "%1lld %3lld %1lld %4lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test ints_nwidth2
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1337";
const char fstr[] = "%1lld %1lld %1lld %1lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test ints_nwidth3
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "100000000000000005";
const char fstr[] = "%3lld%lld%1lld%5lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test ints_nwidth4
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1337";
const char fstr[] = "%15lld %1lld %1lld %1lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test ints_astwidth1
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;
const char str[] = "1337123123 1 123412341234 1 999999 0";
const char fstr[] = "%*d %lld %*d %lld %*d %lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);

#test ints_astwidth2
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1337";
const char fstr[] = "%15lld %1lld %1lld %1lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test ints_astwidth3
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1337";
const char fstr[] = "%15lld %1lld %1lld %1lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test ints_astwidth4
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1337";
const char fstr[] = "%15lld %1lld %1lld %1lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test signed_ints1
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "11337 ++3 -5 ------4";
const char fstr[] = "%lld %lld %lld %lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test signed_ints2
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "-1337 +1 -1 -1";
const char fstr[] = "%15lld %1lld %1lld %5lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test signed_ints3
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "-0 +0 +0 -0";
const char fstr[] = "%2lld %1lld %1lld %1lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test signed_ints4
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "1 01 10 0";
const char fstr[] = "%lld %lld %lld %lld";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test spec_i_int1
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "300 500 -600 +700";
const char fstr[] = "%lli %lli %lli %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test spec_i_int2
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "300500-600+700 111";
const char fstr[] = "%lli %lld %lld %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test spec_i_int3
long long a1 = 0, a2 = 0, c1 = 0, c2 = 0;
char b1 = 0, b2 = 0, d1 = 0, d2 = 0;
const char str[] = "300500-600+700+400";
const char fstr[] = "%lli%c%lli%c";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test spec_i_int4
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "  55555 f f f5555555 ddd   4    3    1 ";
const char fstr[] = "%lli %lld %lld %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test spec_i_hex1
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "0xFFF 0xA123123 0x123123 0x0";
const char fstr[] = "%lli %lld %lld %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test spec_i_hex2
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = " 0xFFFF 0xf 0xf 0xf5555555 ddd   4    3    1 ";
const char fstr[] = "%lli %lld %lld %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test spec_i_oct1
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "  055555 0f 0f 0f5555555 0ddd   4    3    1 ";
const char fstr[] = "%lli %lld %lld %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test spec_i_oct2
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "  055555 0f 0f 0f5555555 0ddd   4    3    1 ";
const char fstr[] = "%lli %lld %lld %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

/* [%s] */

#test strings1
char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};

char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};
char s8[BUFFERSIZE] = {'\0'};

const char str[] = "Aboba Floppa Keppa Shleppa Anuroba";
const char fstr[] = "%s %s %s %s";

int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

ck_assert_int_eq(res1, res2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);

#test strings_mixed3
char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};

char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};
char s8[BUFFERSIZE] = {'\0'};

long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = "Aboba 123 Floppa -3 Keppa 4444Shleppa 333Anuroba 3";
const char fstr[] = "%s%ld%s%d%s%d%s";

int16_t res1 = s21_sscanf(str, fstr, s1, &a1, s2, &b1, s3, &c1, s4, &d1);
int16_t res2 = sscanf(str, fstr, s5, &a2, s6, &b2, s7, &c2, s8, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);

#test strings2
char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};

char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};
char s8[BUFFERSIZE] = {'\0'};

const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
const char fstr[] = "%s%s%s%s";

int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

ck_assert_int_eq(res1, res2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);

#test strings3
char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};

char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};
char s8[BUFFERSIZE] = {'\0'};

const char str[] = "aboba\tkepaboba floppa shleppa koooppa ap p p p p";
const char fstr[] = "%*s%*s%*s%*s";

int16_t res1 = s21_sscanf(str, fstr);
int16_t res2 = sscanf(str, fstr);

ck_assert_int_eq(res1, res2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);

#test strings4
char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};

char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};
char s8[BUFFERSIZE] = {'\0'};

const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
const char fstr[] = "%1s%1s%1s%1s";

int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

ck_assert_int_eq(res1, res2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);

#test strings5
char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};

char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};
char s8[BUFFERSIZE] = {'\0'};

const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
const char fstr[] = "%3s%3s%3s%3s";

int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

ck_assert_int_eq(res1, res2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);

#test strings6
char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};

char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};
char s8[BUFFERSIZE] = {'\0'};

const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
const char fstr[] = "%150s%1s%1s\t%3s";

int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

ck_assert_int_eq(res1, res2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);

// strings_mixed1

#test strings_mixed1
unsigned long long int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;
long long d1 = 0, d2 = 0;
long double e1 = 0, e2 = 0;

const char str[] =
    "4444444"
    "eeeeeee\teeeeeee";
const char fstr[] = "%5s %1s %*s %*s %llu %s %llu %llu %lld %Lf %33s";

char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};
char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};
char s8[BUFFERSIZE] = {'\0'};
char s9[BUFFERSIZE] = {'\0'};
char s10[BUFFERSIZE] = {'\0'};

int16_t res1 = s21_sscanf(str, fstr, s7, s9, &a1, s5, &b1, &c1, &d1, &e1, s1);
int16_t res2 = sscanf(str, fstr, s8, s10, &a2, s6, &b2, &c2, &d2, &e2, s2);

ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s2);
ck_assert_str_eq(s3, s4);
ck_assert_str_eq(s5, s6);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test strings_mixed2
int d1 = 0, d2 = 0, b1 = 0, b2 = 0, a1 = 0, a2 = 0;
long long v1, v2;

const char str[] = "1 1 1 1 1 -1";
const char fstr[] = "%1s %5d %1s %1s %d %lld %d";

char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s4[BUFFERSIZE] = {'\0'};
char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};

int16_t res1 = s21_sscanf(str, fstr, s1, &a1, s2, s3, &b1, &v1, &d1);
int16_t res2 = sscanf(str, fstr, s4, &a2, s5, s6, &b2, &v2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s2);
ck_assert_str_eq(s3, s4);
ck_assert_str_eq(s5, s6);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(d1, d2);

/* [%n] */

#test n1
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
int32_t n1 = 0, n2 = 5;

const char str[BUFFERSIZE] = "50 160 70 80";
const char fstr[BUFFERSIZE] = "%lli %lli %n %lli %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &n1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &n2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(n1, n2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test n2
int n1 = 1, n2 = 5;

char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};
char s3[BUFFERSIZE] = {'\0'};
char s5[BUFFERSIZE] = {'\0'};
char s6[BUFFERSIZE] = {'\0'};
char s7[BUFFERSIZE] = {'\0'};

const char str[] = "cbobErobM fl? asdfasdflkasdf asdfasdf asdfasdf 88888";
const char fstr[] = "%s %s %n %s";

int32_t res1 = s21_sscanf(str, fstr, s1, s2, &n1, s3);
int32_t res2 = sscanf(str, fstr, s5, s6, &n2, s7);

ck_assert_int_eq(res1, res2);

ck_assert_int_eq(n1, n2);
ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);

#test n3
int n1 = 0, n2 = 5;

const char str[BUFFERSIZE] = "50 60 70 80";
const char fstr[BUFFERSIZE] = "%n";

int16_t res1 = s21_sscanf(str, fstr, &n1);
int16_t res2 = sscanf(str, fstr, &n2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(n1, n2);

#test n4
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
int32_t n1 = 0, n2 = 5;

const char str[] = "50 60 70 80";
const char fstr[] = "%lli %lli %n %lli %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &n1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &n2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(n1, n2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test n5
long long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
int n1 = 0, n2 = 5;

const char str[] = "50 60 70 80";
const char fstr[] = "%lli %lli %n %lli %lli";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &n1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &n2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(n1, n2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

/* [%f] / [%g] / %[%G] */

#test floats1
long double a1 = 1, a2 = 0, b1 = 1, b2 = 0, c1 = 1, c2 = 0, d1 = 1, d2 = 0;

const char str[] = "53.1 -4.1135 41.3333 +2.0001";
const char fstr[] = "%Lf %Lf %Lf %Lf";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_double_eq(a1, a2);
ck_assert_double_eq(b1, b2);
ck_assert_double_eq(c1, c2);
ck_assert_double_eq(d1, d2);

#test floats2
double a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = "0.00001 -4123123 4. .";
const char fstr[] = "%lf %lf %lf %lf";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_double_eq(a1, a2);
ck_assert_double_eq(b1, b2);
ck_assert_double_eq(c1, c2);
ck_assert_double_eq(d1, d2);

#test floats3
float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = ". . . .";
const char fstr[] = "%f %f %f %f";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_double_eq(a1, a2);
ck_assert_double_eq(b1, b2);
ck_assert_double_eq(c1, c2);
ck_assert_double_eq(d1, d2);

#test floats4
long double a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = "513.41 -4.14135 414.3333 +112.0001";
const char fstr[] = "%Lf %Lf %Lf %Lf";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_double_eq(a1, a2);
ck_assert_double_eq(b1, b2);
ck_assert_double_eq(c1, c2);
ck_assert_double_eq(d1, d2);

#test floats5
float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;

const char str[] = "53.1 -4.1135 411231.333 +2.0001";
const char fstr[] = "%*f %f %f %f";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

ck_assert_int_eq(res1, res2);
ck_assert_float_eq(a1, a2);
ck_assert_float_eq(b1, b2);
ck_assert_float_eq(c1, c2);

#test floats_hash
float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;

const char str[] = "53.1 -4.1135 411231.333 +2.0001";
const char fstr[] = "%#f %#f %#f %#f";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

ck_assert_int_eq(res1, res2);
ck_assert_float_eq(a1, a2);
ck_assert_float_eq(b1, b2);
ck_assert_float_eq(c1, c2);

#test floats_sci1
float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = "1.4441 1.31e+4 -3.31e-4 0.444e-5";
const char fstr[] = "%G %G %G %G";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_double_eq(a1, a2);
ck_assert_double_eq(b1, b2);
ck_assert_double_eq(c1, c2);
ck_assert_double_eq(d1, d2);

#test floats_sci2
float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = "inf 1.31e+4 NaN 0.444e-5";
const char fstr[] = "%G %G %G %G";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_ldouble_eq(a1, a2);
// Unfortunately, assertions for inf do not work correctly in libcheck
// ck_assert_ldouble_infinite(a1);
// ck_assert_ldouble_infinite(a2);
ck_assert_double_eq(b1, b2);
ck_assert_float_nan(c1);
ck_assert_float_nan(c2);
ck_assert_double_eq(d1, d2);

#test floats_sci3
float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = "inF InF inF INF";
const char fstr[] = "%G %G %G %G";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_ldouble_eq(a1, a2);
ck_assert_double_eq(b1, b2);
ck_assert_double_eq(c1, c2);
ck_assert_double_eq(d1, d2);

#test floats_sci4
float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = "Nan NAN 0.0000 0";
const char fstr[] = "%G %G %G %G";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_float_nan(a1);
ck_assert_float_nan(a2);
ck_assert_float_nan(b1);
ck_assert_float_nan(b2);
ck_assert_ldouble_eq(c1, c2);
ck_assert_ldouble_eq(d1, d2);

#test floats_sci5
float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

const char str[] = "nAN           INF                   -0.1111         1e-10";
const char fstr[] = "%G %G %G %G";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_float_nan(a1);
ck_assert_float_nan(a2);
ck_assert_ldouble_eq(b1, b2);
ck_assert_ldouble_eq(c1, c2);
ck_assert_ldouble_eq(d1, d2);

/* [%u] */

#test uint1
unsigned short a1 = 0, a2 = 0;
unsigned int b1 = 0, b2 = 0;
unsigned long c1 = 0, c2 = 0;
unsigned long long d1 = 0, d2 = 0;
const char str[] = "1337 +21 --5008 3000";
const char fstr[] = "%hu %u %lu %llu";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_uint_eq(res1, res2);
ck_assert_uint_eq(a1, a2);
ck_assert_uint_eq(b1, b2);
ck_assert_uint_eq(c1, c2);
ck_assert_uint_eq(d1, d2);

#test uint2
unsigned long long int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0,
                       d2 = 0;
const char str[] = "1337 233333331 5008 3000";
const char fstr[] = "%1lu %2lu %5lu %4lu";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test uint3
unsigned long long int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;
long long d1 = 0, d2 = 0;
long double v1, v2;

const char str[] =
    "\t\t\t\t\t\n 3      adsfdfa%$$$$`adfasdfasdfaszcvzcxvcv -1337 "
    "anurobich+ 21 -5008 -33000 0.3333";
const char fstr[] = "%*s %*s %llu %s %llu %llu %lld";

char s1[BUFFERSIZE] = {'\0'};
char s2[BUFFERSIZE] = {'\0'};

int16_t res1 = s21_sscanf(str, fstr, &a1, s1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, s2, &b2, &c2, &d2);

ck_assert_uint_eq(res1, res2);
ck_assert_str_eq(s1, s2);
ck_assert_uint_eq(a1, a2);
ck_assert_uint_eq(b1, b2);
ck_assert_uint_eq(c1, c2);
ck_assert_uint_eq(d1, d2);

#test uint4
unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "-1337 +21 --5008 3000";
const char fstr[] = "%hu %hu %hu %hu";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test uint5
unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "-1337 +21 --5008 3000";
const char fstr[] = "%hu %hu %hu %hu";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test uint6
unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
const char str[] = "-1337 +21 --5008 3000";
const char fstr[] = "%hu %hu %hu %hu";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test upeer_hex_base_version
uint32_t a1, a2;
const char str[] = "F";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_overflow
uint32_t a1, a2;
const char str[] = "0xFFFFFFFF";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_0x
uint32_t a1, a2;
const char str[] = "0x";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_0X
uint32_t a1, a2;
const char str[] = "0X";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_empty
uint32_t a1, a2;
const char str[] = "";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test upeer_hex_fail
uint32_t a1, a2;
const char str[] = "qF";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test upeer_hex_spaces_tabs_sns
uint32_t a1, a2;
const char str[] = "          \n             \n     F";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_short
uint16_t a1, a2;
const char str[] = "F";
const char fstr[] = "%hX";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_long
unsigned long int a1, a2;
const char str[] = "F";
const char fstr[] = "%lX";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_longlong
unsigned long long int a1, a2;
const char str[] = "F";
const char fstr[] = "%llX";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_2x
uint32_t a1, a2;
const char str[] = "0xFF0x0xFFF 0xFFxFF";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_star
const char str[] = "0xFF0x0xFFF 0xFFxFF";
const char fstr[] = "%*X";
uint32_t res1 = s21_sscanf(str, fstr);
uint32_t res2 = sscanf(str, fstr);

ck_assert_int_eq(res1, res2);

#test upeer_hex_nohex
uint32_t a1, a2;
const char str[] = "tqwqpl";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test upeer_hex_lower
uint32_t a1, a2;
const char str[] = "abcdef";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upeer_hex_sign
uint32_t a1, a2;
const char str[] = "-f";
const char fstr[] = "%X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_base_version
uint32_t a1, a2;
const char str[] = "f";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_overflow
uint32_t a1, a2;
const char str[] = "0xfffffffffffffffffff";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_0x
uint32_t a1, a2;
const char str[] = "0x";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_0X
uint32_t a1, a2;
const char str[] = "0X";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_empty
uint32_t a1, a2;
const char str[] = "";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test lower_hex_fail
uint32_t a1, a2;
const char str[] = "qF";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test lower_hex_spaces_tabs_sns
uint32_t a1, a2;
const char str[] = "          \n             \n     F";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_short
uint16_t a1, a2;
const char str[] = "ff";
const char fstr[] = "%hx";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_long
unsigned long int a1, a2;
const char str[] = "ff";
const char fstr[] = "%lx";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_longlong
unsigned long long int a1, a2;
const char str[] = "faaaaaaaaaaaaf";
const char fstr[] = "%llx";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
// ck_assert_unsigned long long int_eq(a1, a2);
// ck_assert_uint64_eq(a1, a2);
ck_assert_uint_eq(a1, a2);

#test lower_hex_2x
uint32_t a1, a2;
const char str[] = "0xFF0x0xFFF 0xFFxFF";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_star
const char str[] = "0xFF0x0xFFF 0xFFxFF";
const char fstr[] = "%*x";
uint32_t res1 = s21_sscanf(str, fstr);
uint32_t res2 = sscanf(str, fstr);

ck_assert_int_eq(res1, res2);

#test lower_hex_nohex
uint32_t a1, a2;
const char str[] = "tqwqpl";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test lower_hex_lower
uint32_t a1, a2;
const char str[] = "abcdef";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_sign
uint32_t a1, a2;
const char str[] = "-f";
const char fstr[] = "%x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test upper_hex_len
uint32_t a1, a2;
const char str[] = "123531FFF";
const char fstr[] = "%2X";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test lower_hex_len
uint32_t a1, a2;
const char str[] = "123531FFF";
const char fstr[] = "%2x";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_base_version
uint32_t a1, a2;
const char str[] = "777";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_overflow
uint32_t a1, a2;
const char str[] = "0x7777777777777777777777";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_0x
uint32_t a1, a2;
const char str[] = "0x";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_0X
uint32_t a1, a2;
const char str[] = "0X";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_empty
uint32_t a1, a2;
const char str[] = "";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test octal_fail
uint32_t a1, a2;
const char str[] = "q1";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test octal_spaces_tabs_sns
uint32_t a1, a2;
const char str[] = "          \n             \n     5";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_short
uint16_t a1, a2;
const char str[] = "12";
const char fstr[] = "%ho";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_long
unsigned long int a1, a2;
const char str[] = "57234";
const char fstr[] = "%lo";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_longlong
unsigned long long int a1, a2;
const char str[] = "12356226137";
const char fstr[] = "%llo";
uint16_t res1 = s21_sscanf(str, fstr, &a1);
uint16_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_2x
uint32_t a1, a2;
const char str[] = "0x12320x213x123213";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_star
const char str[] = "521561612";
const char fstr[] = "%*o";
uint32_t res1 = s21_sscanf(str, fstr);
uint32_t res2 = sscanf(str, fstr);

ck_assert_int_eq(res1, res2);

#test octal_nohex
uint32_t a1, a2;
const char str[] = "tqwqpl";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);

#test octal_lower
uint32_t a1, a2;
const char str[] = "01234567";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_sign
uint32_t a1, a2;
const char str[] = "-66";
const char fstr[] = "%o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test octal_len
uint32_t a1, a2;
const char str[] = "123531";
const char fstr[] = "%2o";
uint32_t res1 = s21_sscanf(str, fstr, &a1);
uint32_t res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test buff1
int32_t a1, a2;
int32_t b1, b2;
const char str[] = "12 keppa 12";
const char fstr[] = "%d keppa %d";
int32_t res1 = s21_sscanf(str, fstr, &a1, &b1);
int32_t res2 = sscanf(str, fstr, &a2, &b2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);

#test buff2
int32_t a1, a2;
int32_t b1, b2;
const char str[] = "12keppa12";
const char fstr[] = "%dkeppa%d";
int32_t res1 = s21_sscanf(str, fstr, &a1, &b1);
int32_t res2 = sscanf(str, fstr, &a2, &b2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);

#test pointer1
int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
const char fstr[] = "%p %p %p %p";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_ptr_eq(a1, a2);
ck_assert_ptr_eq(b1, b2);
ck_assert_ptr_eq(c1, c2);
ck_assert_ptr_eq(d1, d2);

#test pointer2
int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
const char fstr[] = "%p %p %p %p";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_ptr_eq(a1, a2);
ck_assert_ptr_eq(b1, b2);
ck_assert_ptr_eq(c1, c2);
ck_assert_ptr_eq(d1, d2);

#test pointer3
int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
const char fstr[] = "%p %p %p %p";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_ptr_eq(a1, a2);
ck_assert_ptr_eq(b1, b2);
ck_assert_ptr_eq(c1, c2);
ck_assert_ptr_eq(d1, d2);

#test pointer4
int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
const char fstr[] = "%p %p %p %p";

int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_ptr_eq(a1, a2);
ck_assert_ptr_eq(b1, b2);
ck_assert_ptr_eq(c1, c2);
ck_assert_ptr_eq(d1, d2);

#test hard1
int a1 = 0, a2 = 5, a3 = 3, a4 = 9;
int32_t n1 = 500, n2 = 10000;

const char str[] = "123123SkipMePlease!!!!123";
const char fstr[] = "%dSkipMePlease!!!!%d %n";

int16_t res1 = s21_sscanf(str, fstr, &a1, &a3, &n1);
int16_t res2 = sscanf(str, fstr, &a2, &a4, &n2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(n1, n2);
ck_assert_int_eq(a3, a4);
ck_assert_int_eq(n1, n2);

#test buff3
int32_t a1, a2;
int32_t b1 = 0, b2 = 0;
const char str[] = "12keppa12";
const char fstr[] = "%dkeppapos%d";
int32_t res1 = s21_sscanf(str, fstr, &a1, &b1);
int32_t res2 = sscanf(str, fstr, &a2, &b2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);

#test upper1
char str[] = "good job";
char expected[] = "GOOD JOB";
char *got = s21_to_upper(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test upper2
char str[] = "empty";
char expected[] = "EMPTY";
char *got = s21_to_upper(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test upper3
char str[] = "1+1*1";
char expected[] = "1+1*1";
char *got = s21_to_upper(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test upper4
char str[] = " ";
char expected[] = " ";
char *got = s21_to_upper(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test upper5
char str[] = "";
char expected[] = "";
char *got = s21_to_upper(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test lower1
char str[] = "ShLePa V TaZ1Ke?";
char expected[] = "shlepa v taz1ke?";
char *got = s21_to_lower(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test lower2
char str[] = "123456789Q";
char expected[] = "123456789q";
char *got = s21_to_lower(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test lower3
char str[] = "Space created";
char expected[] = "space created";
char *got = s21_to_lower(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test lower4
char str[] = "";
char expected[] = "";
char *got = s21_to_lower(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test lower5
char str[] = "";
char expected[] = "";
char *got = s21_to_lower(str);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test insert1
char str[] = "Shlepa";
char src[] = "I love my . He is very kind!";
size_t index = 10;
char expected[] = "I love my Shlepa. He is very kind!";
char *got = (char *)s21_insert(src, str, index);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test insert2
char str[] = "Hello, ";
char src[] = "Aboba!";
size_t index = 0;
char expected[] = "Hello, Aboba!";
char *got = (char *)s21_insert(src, str, index);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test insert3
char str[] = "";
char src[] = "";
size_t index = 100;
char *expected = NULL;
char *got = (char *)s21_insert(src, str, index);
ck_assert_pstr_eq(got, expected);
if (got) free(got);

#test insert4
char *src = NULL;
char *str = NULL;
size_t index = 100;
char *expected = NULL;
char *got = (char *)s21_insert(src, str, index);
ck_assert_ptr_eq(got, expected);
if (got) free(got);

#test insert5
char str[] = "Monkey";
char src[] = "Space  ";
size_t index = 6;
char expected[] = "Space Monkey ";
char *got = (char *)s21_insert(src, str, index);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test insert_empty
char *str = NULL;
char src[] = "Space  ";
size_t index = 0;
char expected[] = "Space  ";
char *got = (char *)s21_insert(src, str, index);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test trim1
char str[] = "+!!++Abo+ba++00";
char trim_ch[] = "+!0-";
char expected[] = "Abo+ba";
char *got = (char *)s21_trim(str, trim_ch);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test trim2
char str[] = "Ab000cd0";
char trim_ch[] = "003";
char expected[] = "Ab000cd";
char *got = s21_trim(str, trim_ch);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test trim3
char str[] = "DoNotTouch";
char trim_ch[] = "Not";
char expected[] = "DoNotTouch";
char *got = s21_trim(str, trim_ch);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test trim4
char str[] = "&* !!sc21 * **";
char trim_ch[] = "&!* ";
char expected[] = "sc21";
char *got = s21_trim(str, trim_ch);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test trim5
char str[] = " Good morning!    ";
char trim_ch[] = " ";
char expected[] = "Good morning!";
char *got = s21_trim(str, trim_ch);
ck_assert_str_eq(got, expected);
if (got) free(got);

#test trim_empty
char str[] = "        abc         ";
char trim_ch[] = "";
char *expected = "        abc         ";
char *got = s21_trim(str, trim_ch);
ck_assert_pstr_eq(got, expected);
if (got) free(got);

#test trim_null
char str[] = "        abc         ";
char *trim_ch = NULL;
char expected[] = "        abc         ";
char *got = s21_trim(str, trim_ch);
ck_assert_str_eq(got, expected);
if (got) free(got);